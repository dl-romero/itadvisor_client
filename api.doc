{
    "basePath": "/api/v8.1",
    "swagger": "2.0",
    "info": {
        "title": "Operation REST Web Service API",
        "version": "1.1"
    },
    "tags": [
        {
            "name": "assets",
            "description": "Asset Service"
        },
        {
            "name": "audit-trail-entries",
            "description": "Audit Trail Service"
        },
        {
            "name": "authentication",
            "description": "Authentication Service"
        },
        {
            "name": "authentication-servers",
            "description": "Authentication Servers Service"
        },
        {
            "name": "backup",
            "description": "Backup Service <strong style=\"color:orange\">Internal</strong>"
        },
        {
            "name": "certificates",
            "description": "Certificate Service"
        },
        {
            "name": "change-request",
            "description": "Change Request service"
        },
        {
            "name": "change-request-template",
            "description": "Change Request Template service"
        },
        {
            "name": "configuration",
            "description": "Configuration Service"
        },
        {
            "name": "custom-properties",
            "description": "Custom Properties Service"
        },
        {
            "name": "customers",
            "description": "Customer Service"
        },
        {
            "name": "customers-count",
            "description": "Customer count service"
        },
        {
            "name": "equipment-browser",
            "description": "Equipment browser service"
        },
        {
            "name": "etl-configuration",
            "description": "ETL Configuration Service <strong style=\"color:orange\">Internal</strong>"
        },
        {
            "name": "genomes",
            "description": "Genome Service"
        },
        {
            "name": "kpis",
            "description": "Key Performance Indicator (KPI) Service"
        },
        {
            "name": "licenses",
            "description": "License Service"
        },
        {
            "name": "mail",
            "description": "Mail Service"
        },
        {
            "name": "platform-status",
            "description": "Platform Status Service <strong style=\"color:orange\">Internal</strong>"
        },
        {
            "name": "powercapacity",
            "description": "Power Capacity Service"
        },
        {
            "name": "powerpath",
            "description": "Power Path Service"
        },
        {
            "name": "routing",
            "description": "Cable routing service"
        },
        {
            "name": "sensormapping",
            "description": "Sensor Mapping Service <strong style=\"color:orange\">Internal</strong>"
        },
        {
            "name": "struxure-on",
            "description": "StruxureOn Service"
        },
        {
            "name": "svg",
            "description": "Svg Service"
        },
        {
            "name": "user-groups",
            "description": "User Group Service"
        },
        {
            "name": "user-message",
            "description": "User message service"
        },
        {
            "name": "users",
            "description": "User Service"
        },
        {
            "name": "work-orders",
            "description": "Work Order Service"
        }
    ],
    "paths": {
        "/assets": {
            "get": {
                "tags": [
                    "assets"
                ],
                "operationId": "getTopLevelAssets",
                "summary": "Get the top level assets a user has access to",
                "description": "Get the top level assets a user has access to. For a regular EcoStruxure IT Advisor user this will be the locations, floor plans and rooms he has access to.\n              For a colocation customer this will be the room, cage, or rack he has rented, though we do not support returning racks from a storage room.<br/>\n              Details regarding the exposed objects and their properties can be found <a href=\"services/AssetVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "optional param to see top level assets for a customer.",
                        "name": "customer-id",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "description": "optional param to return recursively locations and rooms; the parameter is only supported for non-tenant user and if customerId is not specified;\n        it is treated as false if not specified",
                        "name": "recursive",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Asset"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested assets"
                    }
                }
            },
            "patch": {
                "tags": [
                    "assets"
                ],
                "operationId": "patchAssets",
                "summary": "Partial updates of multiple assets.",
                "description": "This operation is based on the JSON Patch specification (RFC 6902) http://jsonpatch.com <br/>\n              It includes Asset UUID in JSON Patch to allow multiple operations on multiple assets.\n              <h5>Basic property example</h5>\n              <p>Supported basic properties: <code>/name</code>, <code>/serialNumber</code>, <code>/barcode</code>, <code>/manufacturer</code>, <code>/partNumber</code>, <code>/modelName</code>, <code>/description</code></p>\n              <table>\n              <tr>\n              <th>Operation</th>\n              <th>JSON example</th>\n              </tr>\n              <tr>\n              <td style=\"white-space: nowrap;\">Update name</td>\n              <td>{ \"uuid\": \"d212a0ee-7fd0-11ee-b962-0242ac120002\", \"op\": \"replace\", \"path\": \"/name\", \"value\": \"new name\" }</td>\n              </tr>\n              </table>\n              <br/>\n              <table>\n              <tr>\n              <td style=\"white-space: nowrap;\">add/change/remove custom property</td>\n              <td>\n              [ { \"uuid\": \"d212a0ee-7fd0-11ee-b962-0242ac120001\", \"op\": \"add\", \"path\": \"/customProperty/cp1\", \"value\": \"cp_value1\" },<br/> { \"uuid\": \"d212a0ee-7fd0-11ee-b962-0242ac120002\", \"op\": \"replace\", \"path\": \"/customProperty/cp2\", \"value\": \"true\"},<br/> { \"uuid\": \"d212a0ee-7fd0-11ee-b962-0242ac120003\", \"op\": \"remove\", \"path\": \"/customProperty/cp3\" } ]</td>\n              </tr>\n              <tr>\n              <td style=\"white-space: nowrap;\">add/remove tag</td>\n              <td>\n              [ { \"uuid\": \"d212a0ee-7fd0-11ee-b962-0242ac120001\", \"op\": \"add\", \"path\": \"/tag/tagName\" },<br/> { \"uuid\": \"d212a0ee-7fd0-11ee-b962-0242ac120002\", \"op\": \"remove\", \"path\": \"/tag/tagName\" } ]</td>\n              </tr>\n              </table>\n              <br/>",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "patch operations that should update the assets.",
                        "name": "assetPatchOperations",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AssetJsonPatchOperation"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RejectedPatchOperation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorised - Missing access permission for requested assets"
                    }
                }
            }
        },
        "/assets/search": {
            "get": {
                "tags": [
                    "assets"
                ],
                "operationId": "searchAssets",
                "summary": "Search assets",
                "description": "Searches for assets containing the words in the string. The search functionality is viable for searching specific rooms, locations or assets. It is an indexed search, limited to 50 items. It uses cashed data and may not represent the most recent changes in your datacenter‚Äù.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "A list of words to search for, separated by spaces. Prefer complete words or the start of words.",
                        "name": "q",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "description": "A list of item types to search among. If no types are given all item types will be included in the search.",
                        "name": "type",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "in": "query",
                        "description": "Limit of items returned from search (optional). This value overwrites default value.",
                        "name": "returnItemsLimit",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AssetSearchResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested assets"
                    }
                }
            }
        },
        "/assets/types": {
            "get": {
                "tags": [
                    "assets"
                ],
                "operationId": "getTypes",
                "summary": "Get metadata for the asset types",
                "description": "The types describe how the assets are presented in the EcoStruxure IT Advisor client.",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested assets"
                    }
                }
            }
        },
        "/assets/visuals": {
            "post": {
                "tags": [
                    "assets"
                ],
                "operationId": "postAssetVisualsResource",
                "summary": "Upload an image resource to be used as an asset visual <strong style=\"color:red\">Experimental - do not use</strong>",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "in": "formData",
                        "description": "an image file",
                        "name": "resource",
                        "required": true,
                        "type": "file"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - unsupported image format"
                    }
                }
            }
        },
        "/assets/visuals/{id}": {
            "get": {
                "tags": [
                    "assets"
                ],
                "operationId": "getAssetVisualResource",
                "summary": "Download the server visual picture resource as binary data <strong style=\"color:red\">Experimental - do not use</strong>",
                "description": "This endpoint is open to unauthenticated users.",
                "produces": [
                    "application/octet-stream",
                    "image/*"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the given UUID of the server visual resource",
                        "name": "id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/ByteArray"
                        }
                    }
                }
            }
        },
        "/assets/{asset-id}": {
            "get": {
                "tags": [
                    "assets"
                ],
                "operationId": "getAsset",
                "summary": "Get the asset with the given id",
                "description": "The query parameter include can be used to enrich the returned asset. Multiple include parameters can be used pr. request. Supported options:\n              <ul>\n              <li>children - fetches the direct children of the asset and includes them in the result</li>\n              <li>custom_properties - adds information about custom properties to the returned assets (user related to customers can not request custom properties)</li>\n              <li>tags - adds information about tags to the returned assets</li>\n              <li>device_links - adds information about external devices to the returned assets, if you have access to the device data.</li>\n              <li>navigation_path - adds information about the logical path to the asset, e.g. 'Test Room/My Cage/The Rack/Server 42'</li>\n              <li>visuals - adds information about asset visuals on rack mounted equipment <strong style=\"color:red\">Experimental - do not use</strong></li>\n              </ul>",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the asset that should be returned",
                        "name": "asset-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "description": "data the asset should be enriched with. See implementation details for allowed values",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "children",
                                "children_recursive",
                                "custom_properties",
                                "custom_property_templates",
                                "device_links",
                                "navigation_path",
                                "drawing_shapes",
                                "visuals",
                                "tags",
                                "rack_groups"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested assets"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient licenses for requested assets and related information"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "patch": {
                "tags": [
                    "assets"
                ],
                "operationId": "patchAsset",
                "summary": "Partial update of asset with the given ID",
                "description": "This operation is based on the JSON Patch specification (RFC 6902) http://jsonpatch.com <br/>\n              <h5>Basic property example</h5>\n              <table>\n              <tr>\n              <td style=\"white-space: nowrap;\">Update name</td>\n              <td>{ \"op\": \"replace\", \"path\": \"/name\", \"value\": \"new name\" }</td>\n              </tr>\n              <tr>\n              <td style=\"white-space: nowrap;\">Verify current name</td>\n              <td>{ \"op\": \"test\", \"path\": \"/name\", \"value\": \"expected name\" }</td>\n              </tr>\n              </table>\n              <br/>\n              <h5>Move asset example</h5>\n              <table>\n              <tr>\n              <td style=\"white-space: nowrap;\">Move asset within a rack</td>\n              <td>[ { \"op\": \"replace\", \"path\": \"/parentId\", \"value\": \"parentId\" }, { \"op\": \"replace\", \"path\": \"/rackMounted/rackMountingPosition\", \"value\": \"FRONT_MOUNTED\"},\n              { \"op\": \"replace\", \"path\": \"/rackMounted/unitPosition\", \"value\": \"42\"} ]</td>\n              </tr>\n              <tr>\n              <td style=\"white-space: nowrap;\">Move asset within a chassis</td>\n              <td>\n              [ { \"op\": \"replace\", \"path\": \"/parentId\", \"value\": \"parentId\" }, { \"op\": \"replace\", \"path\": \"/bayPosition\", \"value\": \"UPPER_SLOT\"}, { \"op\": \"replace\", \"path\":\n              \"/bayPositionNumber\", \"value\": \"3\", } ]</td>\n              </tr>\n              <tr>\n              <td style=\"white-space: nowrap;\">add/change/remove custom property</td>\n              <td>\n              [ { \"op\": \"add\", \"path\": \"/customProperty/cp1\", \"value\": \"cp_value1\" }, { \"op\": \"replace\", \"path\": \"/customProperty/cp2\", \"value\": \"true\"}, { \"op\": \"remove\", \"path\":\n              \"/customProperty/cp3\" } ]</td>\n              </tr>\n              <tr>\n              <td style=\"white-space: nowrap;\">add/remove tag</td>\n              <td>\n              [ { \"op\": \"add\", \"path\": \"/tag/tagName\" }, { \"op\": \"remove\", \"path\": \"/tag/tagName\" } ]</td>\n              </tr>\n              <tr>\n              <td style=\"white-space: nowrap;\">add/change/remove customer relation contracted power</td>\n              <td>\n              [ { \"op\": \"add\", \"path\": \"/customerRelation/contractedPower\", \"value\": \"123\"}, { \"op\": \"replace\", \"path\": \"/customerRelation/contractedPower\", \"value\": \"321\" }, { \"op\": \"remove\", \"path\":\n              \"/customerRelation/contractedPower\" } ]</td>\n              </tr>\n              <tr>\n              <td style=\"white-space: nowrap;\">add/change/remove customer relation assigned to</td>\n              <td>\n              [ { \"op\": \"add\", \"path\": \"/customerRelation/assignedTo\", \"value\": \"id_1234\" }, { \"op\": \"replace\", \"path\": \"/customerRelation/assignedTo\", \"value\": \"id_4321\" }, { \"op\": \"remove\", \"path\":\n              \"/customerRelation/assignedTo\" } ]</td>\n              </tr>\n              <tr>\n              <td style=\"white-space: nowrap;\">add/change/remove customer relation comment</td>\n              <td>\n              [ { \"op\": \"add\", \"path\": \"/customerRelation/comment\", \"value\": \"comment\" }, { \"op\": \"replace\", \"path\": \"/customerRelation/comment\", , \"value\": \"new comment\" }, { \"op\": \"remove\", \"path\":\n              \"/customerRelation/comment\" } ]</td>\n              </tr>\n              <tr>\n              <td style=\"white-space: nowrap;\">add/change/remove customer relation state<br/>Value of this is an ID of state in DB. You can fetch states data by calling API GET /customers/customer-states </td>\n              <td>\n              [ { \"op\": \"add\", \"path\": \"/customerRelation/state\", \"value\": \"5b47dbc9-774b-4aff-a31a-54657f75858c\" }, { \"op\": \"replace\", \"path\": \"/customerRelation/state\", \"value\": \"47aed762-bf2f-477c-bf56-e335ad2fcd65\" }, { \"op\": \"remove\", \"path\":\n              \"/customerRelation/state\" } ]</td>\n              </tr>\n              </table>\n              <br/>\n              It is not always necessary to send all three JSON patch operations when moving an asset. If e.g. only the unit position of an asset has changed, sending { \"op\":\n              \"replace\", \"path\": \"/rackMounted/unitPosition\", \"value\": \"42\"} is enough.<br/>\n              To guard against concurrency issues (lost updates) it is recommended to always include a test operation that verifies the current value before updating it.<br/>\n              Verifying that the 'name' property still has the value 'Server 42' before updating it to 'New Name' can be done with the following JSON Patch: <br/>\n              [ { \"op\": \"test\", \"path\": \"/name\", \"value\": \"Server 42\" }, { \"op\": \"replace\", \"path\": \"/name\", \"value\": \"New Name\" } ] <br/>\n              If one of the test operations fails, the entire patch operation is aborted.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the asset that should be updated",
                        "name": "asset-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "patch operations that should update the asset. See implementation details.",
                        "name": "jsonPatchOperations",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JsonPatchOperation"
                            }
                        }
                    },
                    {
                        "in": "query",
                        "description": "data the asset should be enriched with. See implementation details of the GET /assets/{asset-id} operation for allowed values",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "children",
                                "children_recursive",
                                "custom_properties",
                                "custom_property_templates",
                                "device_links",
                                "navigation_path",
                                "drawing_shapes",
                                "visuals",
                                "tags",
                                "rack_groups"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorised - Missing access permission for requested assets"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient licenses for returned updated asset and related information"
                    },
                    "409": {
                        "description": "Conflict - patch operation conflicts with current server state"
                    }
                }
            },
            "delete": {
                "tags": [
                    "assets"
                ],
                "operationId": "deleteAsset",
                "summary": "Delete asset with the given ID",
                "description": "Delete asset with the given ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the asset that should be deleted",
                        "name": "asset-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested assets"
                    }
                }
            }
        },
        "/assets/{asset-id}/children": {
            "post": {
                "tags": [
                    "assets"
                ],
                "operationId": "createAsset",
                "summary": "Create a new asset inside the asset with the given specification",
                "description": "If the new asset is to be located inside a rack, <code>rackMountPosition</code> and <code>uPosition</code> must be specified. If the new asset is to be located\n              inside a chassis, <code>bayPosition</code> and <code>bayPositionNumber</code> must be specified. If the new asset is to be located on a shelf inside a rack,\n              <code>rackMountPosition</code>, <code>xCoordinate</code> and <code>yCoordinate</code> must be specified.<br/>\n              The genomeId of the assetCreationVO parameter can be obtained from the genomes service<br/>\n              Details regarding the the properties of the assetCreationVO parameter can be found <a href=\"services/AssetCreationVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the asset the new asset should be created in.",
                        "name": "asset-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "information about the asset that should be created",
                        "name": "assetCreationVO",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AssetCreation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested assets"
                    }
                }
            }
        },
        "/assets/{asset-id}/custom-property": {
            "put": {
                "tags": [
                    "assets"
                ],
                "operationId": "setCustomProperty",
                "summary": "Sets the value of the specified custom property on the asset",
                "description": "It is only possible to set a value if there is a corresponding custom property\n              definition in the system, and user has access to the asset.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the asset for which the custom property should be set.",
                        "name": "asset-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "is the value to set.",
                        "name": "newValue",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "description": "is the name of the custom property to set.",
                        "name": "property-name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "description": "data the updated asset should be enriched with. See implementation details for allowed values",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "children",
                                "children_recursive",
                                "custom_properties",
                                "custom_property_templates",
                                "device_links",
                                "navigation_path",
                                "drawing_shapes",
                                "visuals",
                                "tags",
                                "rack_groups"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested asset"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient licenses for returned updated asset and related information\n\n                  Note: Custom property name is not a path parameter since it can contain \"/\" and other symbols which are unsafe"
                    }
                }
            },
            "delete": {
                "tags": [
                    "assets"
                ],
                "operationId": "removeCustomProperty",
                "summary": "Removes the specified custom property from the asset.",
                "description": "User needs access to the asset in order to remove the custom property.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the asset for which the custom property should be removed.",
                        "name": "asset-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "description": "is the name of the custom property to remove.",
                        "name": "property-name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "description": "data the updated asset should be enriched with. See implementation details for allowed values",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "children",
                                "children_recursive",
                                "custom_properties",
                                "custom_property_templates",
                                "device_links",
                                "navigation_path",
                                "drawing_shapes",
                                "visuals",
                                "tags",
                                "rack_groups"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested asset"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient licenses for returned updated asset and related information\n\n                  Note: Custom property name is not a path parameter since it can contain \"/\" and other symbols which are unsafe"
                    }
                }
            }
        },
        "/assets/{asset-id}/customer-relation": {
            "put": {
                "tags": [
                    "assets"
                ],
                "operationId": "setCustomerRelation",
                "summary": "Set the customer relation for the given asset, to the given customer relation.",
                "description": "If the user requesting the update on the customer relation has editor rights on the asset, the data will be updated.\n              Contracted power is a double, and its unit is kW.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "name": "customerRelation",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomerRelation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "assets"
                ],
                "operationId": "deleteCustomerRelation",
                "summary": "Set the given asset to have no customer relations.",
                "description": "If the user requesting the update on the asset has editor rights on the asset, the asset will no longer have any customer relations.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "get": {
                "tags": [
                    "assets"
                ],
                "operationId": "getCustomerRelation",
                "summary": "Gets the current customer relation on the given asset",
                "description": "If the user requesting has the rights to use the service, this will return the current Customer relation, for the given asset.\n              <br/>\n              This method does not traverse the parent tree of the asset, until it finds a customer relation. It will only return the customer relation\n              for this specific asset.\n              <br/>\n              Contracted power is a double, and its unit is kW.\n              <br/>\n              Details regarding the customer relation object and its properties can be found <a href=\"services/CustomerRelationVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomerRelation"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/assets/{asset-id}/devices": {
            "get": {
                "tags": [
                    "assets"
                ],
                "operationId": "getDevices",
                "summary": "Get all devices associated with the asset with the asset-id.",
                "description": "A list of devices associated with the asset and devices related to all the child assets.<br/>\n              Does not support call with asset-id for assets of type: location.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the asset the related devices should be returned for.",
                        "name": "asset-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AssetDeviceList"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient licenses for requested assets and related information"
                    }
                }
            }
        },
        "/assets/{asset-id}/metrics": {
            "get": {
                "tags": [
                    "assets"
                ],
                "operationId": "getAssetMetrics",
                "summary": "Get all Asset Values asked for in the include query param for the asset with the asset-id",
                "description": "A list of expand options can be specified to enrich the returned asset. Supported expand options:\n              <table>\n              <thead>\n              <tr>\n              <th>Value</th>\n              <th>Description</th>\n              </tr>\n              </thead> <tbody>\n              <tr>\n              <td>children</td>\n              <td>fetches the direct children of the asset and includes their asset metric's in the result</td>\n              </tr>\n              <tr>\n              <td>total_u_space</td>\n              <td>calculates and adds total unit space to the asset metrics's <code>metrics</code> property</td>\n              </tr>\n              <tr>\n              <td>used_u_space</td>\n              <td>calculates and adds used unit space to the asset metrics's <code>metrics</code> property</td>\n              </tr>\n              <tr>\n              <td>available_u_space</td>\n              <td>calculates and adds available unit space to the asset metrics's <code>metrics</code> property</td>\n              </tr>\n              <tr>\n              <td>contracted_power</td>\n              <td>adds the contracted power if its set directly on the asset to the asset metrics's <code>metrics</code> property</td>\n              </tr>\n              <tr>\n              <td>customer_id</td>\n              <td>adds customer identifier to the asset metrics's <code>metrics</code> property</td>\n              </tr>\n              <tr>\n              <td>total_weight</td>\n              <td>calculates and adds total weight to the asset metrics's <code>metrics</code> property</td>\n              </tr>\n              <tr>\n              <td>total_rack_power_limit</td>\n              <td>calculates and adds total power limit of the rack to the asset metrics's <code>metrics</code> property</td>\n              </tr>\n              <tr>\n              <td>estimated_load</td>\n              <td>calculates and adds estimated load to the asset metrics's <code>metrics</code> property</td>\n              </tr>\n              <tr>\n              <td>measured_peak_load</td>\n              <td>calculates and adds the assets measured peak load last 24 hours to the asset metrics's <code>metrics</code> property</td>\n              </tr>\n              <tr>\n              <td>measured_peak_load_30_days</td>\n              <td>calculates and adds the assets measured peak load going 30 days back, to the asset metrics's <code>metrics</code> property</td>\n              </tr>\n              <tr>\n              <td><strong style=\"color:red\">Experimental - </strong> used_outlet_capacity</td>\n              <td>calculates and adds used outlets grouped by outlet type, to the asset metrics's <code>metrics</code> property</td>\n              </tr>\n              <tr>\n              <td><strong style=\"color:red\">Experimental - </strong> free_outlet_capacity</td>\n              <td>calculates and adds free outlets grouped by outlet type, to the asset metrics's <code>metrics</code> property</td>\n              </tr>\n              <tr>\n              <td><strong style=\"color:red\">Experimental - </strong> total_outlet_capacity</td>\n              <td>calculates and adds total outlets grouped by outlet type, to the asset metrics's <code>metrics</code> property</td>\n              </tr>\n              </tbody>\n              </table>",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the asset the metrics should be returned for",
                        "name": "asset-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "description": "the metrics that should be returned. See implementation details for allowed values",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "children",
                                "total_u_space",
                                "used_u_space",
                                "available_u_space",
                                "contracted_power",
                                "customer_id",
                                "nameplate_load",
                                "estimated_load_per_top_level_item",
                                "total_rack_power_limit",
                                "measured_peak_load",
                                "measured_peak_load_30_days",
                                "total_weight",
                                "estimated_load",
                                "used_outlet_capacity",
                                "total_outlet_capacity",
                                "free_outlet_capacity"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AssetMetrics"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient licenses for requested assets and related information"
                    }
                }
            }
        },
        "/assets/{asset-id}/visuals": {
            "put": {
                "tags": [
                    "assets"
                ],
                "operationId": "putAssetVisual",
                "summary": "Sets a visual of the given type on an asset. <strong style=\"color:red\">Experimental - do not use</strong>",
                "description": "Placement of visuals are defined in {@link AssetVisualPlacementVO} and an existing visual at the given placement will be overwritten.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "metadata about the asset visual and an id to the actual image resource (returned from /assets/visuals)",
                        "name": "assetVisual",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AssetVisual"
                        }
                    },
                    {
                        "in": "path",
                        "description": "UUID of the asset the visual should be added on.",
                        "name": "asset-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/AssetVisual"
                        }
                    },
                    "400": {
                        "description": "Bad Request - unsupported or malformed asset visual"
                    },
                    "401": {
                        "description": "Unauthorized - Missing EDIT permission for the specified asset"
                    }
                }
            },
            "delete": {
                "tags": [
                    "assets"
                ],
                "operationId": "deleteAssetVisual",
                "summary": "Delete asset visual(s) of asset with the given ID. <strong style=\"color:red\">Experimental - do not use</strong>",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "UUID of the asset the visual should be deleted from.",
                        "name": "asset-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "description": "Specifying the placement of the asset visual to delete. Providing no value will delete all visuals associated with a given asset.",
                        "name": "placement",
                        "type": "string",
                        "enum": [
                            "FRONT",
                            "REAR"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request - unsupported or malformed request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing EDIT permission for the specified asset"
                    }
                }
            }
        },
        "/audit-trail-entries": {
            "get": {
                "tags": [
                    "audit-trail-entries"
                ],
                "operationId": "getAuditTrailEntries",
                "summary": "Get a list of audit trail entries for one or more assets.",
                "description": "Viewer access privileges are required for the given assets.<br/>\n              Requires Change license. These are the valid locale parameters:\n              <table>\n              <thead>\n              <tr>\n              <td>locale</td>\n              <td>Description</td>\n              </tr>\n              </thead> <tbody>\n              <tr>\n              <td>en</td>\n              <td>English</td>\n              </tr>\n              <tr>\n              <td>de</td>\n              <td>German</td>\n              </tr>\n              <tr>\n              <td>es</td>\n              <td>Spanish</td>\n              </tr>\n              <tr>\n              <td>fr</td>\n              <td>French</td>\n              </tr>\n              <tr>\n              <td>it</td>\n              <td>Italian</td>\n              </tr>\n              <tr>\n              <td>ja</td>\n              <td>Japanese</td>\n              </tr>\n              <tr>\n              <td>ko</td>\n              <td>Korean</td>\n              </tr>\n              <tr>\n              <td>ru</td>\n              <td>Russian</td>\n              </tr>\n              <tr>\n              <td>pt_BR</td>\n              <td>Portuguese - Brazil</td>\n              </tr>\n              <tr>\n              <td>zh_CN</td>\n              <td>Simplified Chinese - China</td>\n              </tr>\n              <tr>\n              <td>zh_TW</td>\n              <td>Traditional Chinese - Taiwan</td>\n              </tr>\n              </tbody>\n              </table>\n              <hr/>\n              These are the valid entry-type values:\n              <table>\n              <thead>\n              <tr>\n              <td>entry-type</td>\n              <td>Description</td>\n              </tr>\n              </thead> <tbody>\n              <tr>\n              <td colspan=\"2\"><b>Available for all users.</b></td>\n              </tr>\n              <tr>\n              <td>ASSETS</td>\n              <td>All asset related audit log entries (Default for users related to customers)</td>\n              </tr>\n              <tr>\n              <td>ASSET_ADD</td>\n              <td>Asset additions</td>\n              </tr>\n              <tr>\n              <td>ASSET_CHANGE</td>\n              <td>Asset changes</td>\n              </tr>\n              <tr>\n              <td>ASSET_MOVE</td>\n              <td>Asset moves</td>\n              </tr>\n              <tr>\n              <td>ASSET_REMOVE</td>\n              <td>Asset removals</td>\n              </tr>\n              <tr>\n              <td colspan=\"2\"><b>Available for users not related to customers</b></td>\n              </tr>\n              <tr>\n              <td>ALARMS</td>\n              <td>All alarm related audit log entries</td>\n              </tr>\n              <tr>\n              <td>ALARM_RAISED</td>\n              <td>Alarms raised</td>\n              </tr>\n              <tr>\n              <td>ALARM_REMOVED</td>\n              <td>Alarms removed</td>\n              </tr>\n              <tr>\n              <td>ALL</td>\n              <td>All audit log entries.</td>\n              </tr>\n              <tr>\n              <td>CHANGE_MANAGEMENT</td>\n              <td>All change management related audit log entries (entry-types starting with CHANGE)</td>\n              </tr>\n              <tr>\n              <td>CHANGE_MANAGEMENT_WORK_ORDER</td>\n              <td>Work orders</td>\n              </tr>\n              <tr>\n              <td>CHANGE_MANAGEMENT_WORK_ORDER_TASK</td>\n              <td>Work order tasks</td>\n              </tr>\n              <tr>\n              <td>NETWORK_CABLE_TYPES</td>\n              <td>Network cable types</td>\n              </tr>\n              <tr>\n              <td>REPORT_CHANGED</td>\n              <td>Reports changes</td>\n              </tr>\n              <tr>\n              <td colspan=\"2\"><b>Available for users not related to customers with enabling permission: SYSTEM_CONFIGURATION_ADMINISTRATOR and/or\n              USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR</b></td>\n              </tr>\n              <tr>\n              <td>SYSTEM</td>\n              <td>All system related audit log entries (entry-types starting with SYSTEM_)</td>\n              </tr>\n              <tr>\n              <td>SYSTEM_CAPACITY_HISTORY</td>\n              <td>Capacity history</td>\n              </tr>\n              <tr>\n              <td>SYSTEM_CUSTOM_PROPERTIES</td>\n              <td>Custome properties</td>\n              </tr>\n              <tr>\n              <td>SYSTEM_EXTERNAL_SYSTEMS</td>\n              <td>External systems</td>\n              </tr>\n              <tr>\n              <td>SYSTEM_MAIL_SETTINGS</td>\n              <td>Mail settings</td>\n              </tr>\n              <tr>\n              <td>SYSTEM_TAGS</td>\n              <td>Tags</td>\n              </tr>\n              <tr>\n              <td>SYSTEM_USER_INFORMATION_CHANGED</td>\n              <td>User changes</td>\n              </tr>\n              <tr>\n              <td>SYSTEM_USER_LOGINS</td>\n              <td>User logins</td>\n              </tr>\n              <tr>\n              <td>SYSTEM_WORK_ORDERS</td>\n              <td>Work orders</td>\n              </tr>\n              <tr>\n              <td>USER_MESSAGE</td>\n              <td>User messages</td>\n              </tr>\n              </tbody>\n              </table>",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "Lists ids of assets for which to get audit trail entries",
                        "name": "asset-id",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "in": "query",
                        "description": "Excludes entries older than this date. Defaults to 1 month ago if not specified. Unix timestamp in milliseconds.",
                        "name": "from",
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "query",
                        "description": "Excludes entries newer than this date. Defaults to today if not specified. Unix timestamp in milliseconds.",
                        "name": "to",
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "query",
                        "description": "Specifies the locale to use for audit trail entries (see above for valid options). Defaults to English if not specified and not configured for requesting user.",
                        "name": "locale",
                        "type": "string",
                        "enum": [
                            "en",
                            "de",
                            "es",
                            "fr",
                            "it",
                            "ja",
                            "ko",
                            "ru",
                            "pt_BR",
                            "zh_CN",
                            "zh_TW"
                        ]
                    },
                    {
                        "in": "query",
                        "description": "Maximum number of audit trail messages to find. Defaults to 25.",
                        "name": "limit",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "description": "start from this result (default is 0)",
                        "name": "offset",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "entry-type",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "ASSET_ADD",
                                "ASSET_CHANGE",
                                "ASSET_MOVE",
                                "ASSET_REMOVE",
                                "ASSETS",
                                "ALARM_RAISED",
                                "ALARM_REMOVED",
                                "ALARMS",
                                "GENOME_ADDED",
                                "GENOME_REMOVED",
                                "GENOME_UPDATED",
                                "GENOMES",
                                "SYSTEM_CAPACITY_HISTORY",
                                "SYSTEM_CUSTOM_PROPERTIES",
                                "SYSTEM_EXTERNAL_SYSTEMS",
                                "SYSTEM_MAIL_SETTINGS",
                                "SYSTEM_TAGS",
                                "SYSTEM_USER_INFORMATION_CHANGED",
                                "SYSTEM_USER_LOGINS",
                                "SYSTEM_WORK_ORDERS",
                                "SYSTEM",
                                "REPORT_CHANGED",
                                "CHANGE_MANAGEMENT_WORK_ORDER",
                                "CHANGE_MANAGEMENT_WORK_ORDER_TASK",
                                "CHANGE_MANAGEMENT_CHANGE_REQUEST",
                                "CHANGE_MANAGEMENT_CHANGE_REQUEST_TEMPLATE",
                                "CHANGE_MANAGEMENT",
                                "NETWORK_CABLE_TYPES",
                                "USER_MESSAGE",
                                "COLORED_LABELS",
                                "CUSTOMER_STATES",
                                "ALL"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AuditTrailEntry"
                            }
                        }
                    },
                    "400": {
                        "description": "Unable to get audit trail entries"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/authentication": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "operationId": "login",
                "summary": "Login with the given credentials and get a token upon success",
                "description": "Attempts to login with the given credentials. If successfully logged in a token will be returned.\n The token can be used in the following request to the server, \n to use the token add a http header with the name: \"Authorization\" and value \"bearer {token}\"\n and replace {token} with the token received.\n </br>\n If the server receives a http header with the token, an new token will be included in the response header, the name of the header is \"token\" and the value will be the new token.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "the credentials containing the username and password to be authenticated with",
                        "name": "credentials",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/Token"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/authentication/logout": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "operationId": "logout",
                "summary": "Logs out the current user",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "OK - if current user is now logged out"
                    }
                }
            }
        },
        "/authentication/saml2": {
            "get": {
                "tags": [
                    "authentication"
                ],
                "operationId": "saml2Login",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                }
            }
        },
        "/authentication/saml2-callback": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "operationId": "saml2Callback",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "in": "formData",
                        "name": "SAMLResponse",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                }
            }
        },
        "/authentication/saml2-callback/desktop": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "operationId": "saml2CallbackDesktop",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "in": "formData",
                        "name": "SAMLResponse",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                }
            }
        },
        "/authentication/sso": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "operationId": "ssoLogin",
                "summary": "Login with an access token from the configured single sign on provider and get an internal ITA token upon success",
                "description": "Validates the single sign on access token provided in the 'Authorization' header parameter.\n              If validation is successful a new ITA token will be returned and can be used in the following requests to the server.\n              <br/>\n              The benefit of replacing the single sign on access token with an internal ITA token is that the token expire timeout can be configured on ITA server.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/authentication/{username}/password": {
            "put": {
                "tags": [
                    "authentication"
                ],
                "operationId": "updatePassword",
                "summary": "Updates the password of the user with the specified username<br/>",
                "description": "The password can not be updated for users with an authenticationServerId<br/>\n              The operation will verify that the current password is correct before updating to the new password <br/>\n              The updated password have to be different from the current password.<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user whos password should be updated.",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "the current as well as the new password for the user whos password should be updated.",
                        "name": "changePassword",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserPasswordChange"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/authentication-servers": {
            "get": {
                "tags": [
                    "authentication-servers"
                ],
                "operationId": "getAuthenticationServers",
                "summary": "Get authentication servers.",
                "description": "Get a list of all available authentication servers the user has access to. If the user has the enabling-permission\n              USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR all authentication servers are returned. In other cases the authentication server the user is associated\n              with is returned or none if it is not associated with a authentication server. <br/>\n              Details regarding the exposed objects and their properties can be found <a href=\"services/AuthenticationServerVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AuthenticationServer"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "authentication-servers"
                ],
                "operationId": "add",
                "summary": "Add an authentication server",
                "description": "Add the given authentication server. The operation requires that the user has the enabling-permission USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR. The\n              id is assigned by the server so that should not be set.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "The configuration for the authentication server. See the implementation details for the GET /authentication-servers operation for allowed types\n        and relevant properties.",
                        "name": "authenticationServer",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationServer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationServer"
                        }
                    },
                    "204": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/authentication-servers/{id}": {
            "get": {
                "tags": [
                    "authentication-servers"
                ],
                "operationId": "getAuthenticationServer",
                "summary": "Get the authentication server for the given id",
                "description": "Get the authentication server for the given id if the user has access to it. To be able to access all the authentication servers the user needs the\n              enabling-permission USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR. Otherwise the user can only get an authentication server the user is associated with.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the authentication server configuration that should be returned.",
                        "name": "id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationServer"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "authentication-servers"
                ],
                "operationId": "delete",
                "summary": "Delete an authentication server",
                "description": "Delete an authentication server with the given id. The operation requires that the user has the enabling-permission\n              USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the authentication server configuration that should be deleted.",
                        "name": "id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "authentication-servers"
                ],
                "operationId": "update",
                "summary": "Update an authentication server",
                "description": "Update an authentication server with the given id with values from the given authentication server. The operation requires that the user has the\n              enabling-permission USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the authentication server configuration that should be updated.",
                        "name": "id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "The configuration for the authentication server. See the implementation details for the GET /authentication-servers operation for allowed types\n        and relevant properties.",
                        "name": "authenticationServer",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationServer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/authentication-servers/{id}/groups": {
            "get": {
                "tags": [
                    "authentication-servers"
                ],
                "operationId": "getUserGroups",
                "summary": "Fetch groups from an authentication server",
                "description": "Fetch groups from an authentication server with the given id. The operation requires that the user has the enabling-permission\n              USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the authentication server the groups should be fetched from.",
                        "name": "id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "204": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/authentication-servers/{id}/users": {
            "get": {
                "tags": [
                    "authentication-servers"
                ],
                "operationId": "getUsers",
                "summary": "Fetch users from an authentication server",
                "description": "Fetch users from an authentication server with the given id. The operation requires that the user has the enabling-permission\n              USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the authentication server the groups should be fetched from.",
                        "name": "id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "204": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/backup": {
            "get": {
                "tags": [
                    "backup"
                ],
                "operationId": "listBackups",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Get a list of backup references",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BackupFileVO"
                            }
                        }
                    }
                }
            }
        },
        "/backup/backup": {
            "put": {
                "tags": [
                    "backup"
                ],
                "operationId": "scheduleBackup",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Schedule a new backup",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "Prefix for the backup name. A time stamp will be added to this name. If left empty custom_ is used as prefix.",
                        "name": "backupPrefix",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                }
            }
        },
        "/backup/backup-file": {
            "post": {
                "tags": [
                    "backup"
                ],
                "operationId": "uploadBackupFile",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Upload a backup file",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "in": "formData",
                        "name": "backupFile",
                        "required": true,
                        "type": "file"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                }
            }
        },
        "/backup/backup-file/{file}": {
            "get": {
                "tags": [
                    "backup"
                ],
                "operationId": "downloadBackupFile",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Fetch a file stream to a specific backup file.",
                "produces": [
                    "application/octet-stream"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "Name of the backup that should be returned by the call",
                        "name": "file",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    }
                }
            }
        },
        "/backup/restore": {
            "put": {
                "tags": [
                    "backup"
                ],
                "operationId": "scheduleRestore",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Schedule a restore of a backup<br />\n              During the restore the operations service will be restarted.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "Name of the backup that should be restored",
                        "name": "file",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                }
            }
        },
        "/backup/settings": {
            "get": {
                "tags": [
                    "backup"
                ],
                "operationId": "getSettings",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Get backup settings",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "$ref": "#/definitions/BackupSettingsVO"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "backup"
                ],
                "operationId": "updateSettings",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Update backup settings",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "backupSettings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BackupSettingsVO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "$ref": "#/definitions/BackupSettingsVO"
                        }
                    }
                }
            }
        },
        "/certificates": {
            "get": {
                "tags": [
                    "certificates"
                ],
                "operationId": "getAll",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "certificates"
                ],
                "operationId": "addCertificate",
                "summary": "This operation adds the certificate to the key store.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "a base64 encoded string representation of the certificate",
                        "name": "cert",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - if the certificate is now trusted on the server"
                    }
                }
            }
        },
        "/certificates/{SHA-256}": {
            "delete": {
                "tags": [
                    "certificates"
                ],
                "operationId": "removeCertificate",
                "summary": "Removes the certificate with the SHA-256 fingerprint from the key store",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the SHA-256 fingerprint of the certificate that should be removed",
                        "name": "SHA-256",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/change-request": {
            "get": {
                "tags": [
                    "change-request"
                ],
                "operationId": "getChangeRequests",
                "summary": "Returns change requests",
                "description": "Gets change requests the current user has access to. Available to everyone except Tenant users.\n \n <p>For users with Planning Work Orders permission, returns all submitted, closed and needs update change requests and own drafts.\n <p>For other users, returns all own change requests\n <p>Requires Change license",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "whether to include comments in the result, false if not specified",
                        "name": "include-comments",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ChangeRequest"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            },
            "post": {
                "tags": [
                    "change-request"
                ],
                "operationId": "createChangeRequest",
                "summary": "Creates change request",
                "description": "Available to everyone except Tenant users.\n <p>Requires Change license",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "changeRequest",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ChangeRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/change-request/{request-id}": {
            "get": {
                "tags": [
                    "change-request"
                ],
                "operationId": "getChangeRequest",
                "summary": "Returns change request with requested id",
                "description": "Gets change request if the user can access it and the request exists. Available to everyone except Tenant users.\n <p>Users with Planning Work Orders permission have access to all change requests, other users have access to own change requests. \n <p>Requires Change license",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the change request",
                        "name": "request-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "description": "whether to include comments in the result, false if not specified",
                        "name": "include-comments",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ChangeRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not existing"
                    }
                }
            },
            "patch": {
                "tags": [
                    "change-request"
                ],
                "operationId": "patchChangeRequest",
                "summary": "Partial update of change request with given id",
                "description": "This operation is based on the JSON Patch specification (RFC 6902) http://jsonpatch.com <br/>\n              <table>\n              <tr>\n              <td style=\"white-space: nowrap;\">Update change request form</td>\n              <td>{ \"op\": \"replace\", \"path\": \"/formData\", \"old json form\": \"new json form\" }</td>\n              </tr>\n              <tr>\n              <td style=\"white-space: nowrap;\">Change current request status</td>\n              <td>{ \"op\": \"replace\", \"path\": \"/status\", \"value\": \"SUBMITTED\" }</td>\n              </tr>\n              <tr>\n              <td colspan=\"2\">Available states: SUBMITTED, ACCEPTED, REJECTED, DRAFT, NEEDS_UPDATE, CLOSED. \n              </br>\n              Note that correct transitions are: \n              </br>\n              Draft -> Submitted\n              </br>\n              Submitted -> Accepted \n              </br>\n              Accepted -> Closed\n              </br>\n              Submitted -> Rejected\n              </br>\n              Submitted -> Draft (by author for Unsubmit operation) or Needs update (by administrator if the request needs user update).\n              </td>\n              </tr>\n              </table>\n              <p>\n              Requires access to the change request: users with Planning Work Orders permission have access to all change requests, other users have access to own change requests.\n              <p>\n              Requires Change license",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "of the change request to update",
                        "name": "request-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "patch operations list to set",
                        "name": "jsonPatchOperations",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JsonPatchOperation"
                            }
                        }
                    },
                    {
                        "in": "query",
                        "description": "url used for link in email to allow user handy preview of change request",
                        "name": "dco-url",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ChangeRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not existing"
                    }
                }
            },
            "delete": {
                "tags": [
                    "change-request"
                ],
                "operationId": "deleteChangeRequest",
                "summary": "Deletes change request",
                "description": "Available to everyone except Tenant users.\n <p>Requires access to the change request: users with Planning Work Orders permission have access to all change requests, other users have access to own change requests.\n <p>It is impossible to delete change request in Submitted state\n <p>Requires Change license",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the change request to delete",
                        "name": "request-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not existing"
                    }
                }
            }
        },
        "/change-request/{request-id}/comment": {
            "post": {
                "tags": [
                    "change-request"
                ],
                "operationId": "createChangeRequestComment",
                "summary": "Creates change request comment",
                "description": "Available to everyone except Tenant users.\n <p>Requires access to the change request: users with Planning Work Orders permission have access to all change requests, other users have access to own change requests.\n <p>It is not possible to add comment to change request in Draft state\n <p>Requires Change license",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "request-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "message of the comment",
                        "name": "message",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "description": "url used for link in email to allow user handy preview of change request",
                        "name": "dco-url",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ChangeRequestComment"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not existing"
                    }
                }
            }
        },
        "/change-request/{request-id}/equipment/{storage-room-id}": {
            "post": {
                "tags": [
                    "change-request"
                ],
                "operationId": "createEquipment",
                "summary": "Creates equipment adding request.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "request-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "path",
                        "name": "storage-room-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created list of server uuids.",
                        "schema": {
                            "$ref": "#/definitions/EquipmentChangeRequestVO"
                        }
                    },
                    "400": {
                        "description": "Bad request incorrect request status, lack of genome, problem during validation"
                    },
                    "403": {
                        "description": "Forbidden if user is not work order administrator"
                    },
                    "404": {
                        "description": "Not existing change request under changeRequestUuid"
                    }
                }
            }
        },
        "/change-request-template": {
            "get": {
                "tags": [
                    "change-request-template"
                ],
                "operationId": "getTemplates",
                "summary": "Returns change request templates",
                "description": "Available to everyone except Tenant users.\n <p>Requires Change license",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ChangeRequestTemplate"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "change-request-template"
                ],
                "operationId": "createTemplate",
                "summary": "Creates change request template",
                "description": "Available to users with Planning Work Orders permission\n <p>Requires Change license",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "change request template to create",
                        "name": "template",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeRequestTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/change-request-template/{template-id}": {
            "get": {
                "tags": [
                    "change-request-template"
                ],
                "operationId": "getTemplate",
                "summary": "Returns change request template with requested id",
                "description": "Returns change request template if the template exists. Available to everyone except Tenant users.\n <p>Requires Change license",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the change request template",
                        "name": "template-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ChangeRequestTemplate"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not existing"
                    }
                }
            },
            "put": {
                "tags": [
                    "change-request-template"
                ],
                "operationId": "updateTemplate",
                "summary": "Updates change request template",
                "description": "Available to users with Planning Work Orders permission\n <p>Requires Change license",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "of the change request template to update",
                        "name": "template-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "change request template with changes",
                        "name": "template",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeRequestTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not existing"
                    }
                }
            },
            "delete": {
                "tags": [
                    "change-request-template"
                ],
                "operationId": "deleteTemplate",
                "summary": "Deletes change request template",
                "description": "Available to users with Planning Work Orders permission\n <p>Requires Change license",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the change request template to delete",
                        "name": "template-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not existing"
                    }
                }
            }
        },
        "/configuration/analytics": {
            "get": {
                "tags": [
                    "configuration"
                ],
                "operationId": "getAnalyticsSettings",
                "summary": "Get analytics settings",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AnalyticsSettingsVO"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "configuration"
                ],
                "operationId": "updateAnalyticsSettings",
                "summary": "Update analytics settings - including option to disable analytics",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "analyticsSettings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AnalyticsSettingsVO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/configuration/feature-flag/{feature-flag-name}": {
            "put": {
                "tags": [
                    "configuration"
                ],
                "operationId": "set",
                "summary": "Update a specific feature flag.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "feature-flag-name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "featureFlagSetting",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FeatureFlagSetting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "get": {
                "tags": [
                    "configuration"
                ],
                "operationId": "get",
                "summary": "Get the value for a specific feature flag.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "feature-flag-name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FeatureFlagSetting"
                        }
                    }
                }
            }
        },
        "/configuration/feature-flags": {
            "get": {
                "tags": [
                    "configuration"
                ],
                "operationId": "getAll",
                "summary": "Get all the system properties",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "include-disabled",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/configuration/is-on-premise": {
            "get": {
                "tags": [
                    "configuration"
                ],
                "operationId": "isOnPremise",
                "summary": "Get the system property isOnPremise",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/configuration/is-saml-server": {
            "get": {
                "tags": [
                    "configuration"
                ],
                "operationId": "isSAMLServer",
                "summary": "Get the system property isOnPremise",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/configuration/sso-options": {
            "get": {
                "tags": [
                    "configuration"
                ],
                "operationId": "getSsoOptions",
                "summary": "Get SSO settings based on the system properties SSO Provider and SSO client ID",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SsoOptionsVO"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/configuration/update-dce": {
            "put": {
                "tags": [
                    "configuration"
                ],
                "operationId": "updateDCE",
                "summary": "Update DCE settings",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "updateDCE",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DCEUpdateSettingsVO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/configuration/update-dce/report": {
            "get": {
                "tags": [
                    "configuration"
                ],
                "operationId": "loadReportOfUpdateDCE",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "$ref": "#/definitions/DCEUpdateReportVO"
                        }
                    }
                }
            }
        },
        "/custom-properties/definitions": {
            "get": {
                "tags": [
                    "custom-properties"
                ],
                "operationId": "getCustomPropertyDefinitions",
                "summary": "Returns the list of custom property definitions defined on the server.",
                "description": "Details regarding custom property definitions can be found <a href=\"services/CustomPropertyDefinitionVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CustomPropertyDefinition"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/custom-properties/templates": {
            "get": {
                "tags": [
                    "custom-properties"
                ],
                "operationId": "getCustomPropertyTemplates",
                "summary": "Returns the list of custom property templates defined on the server.",
                "description": "Details regarding custom property definitions can be found <a href=\"services/CustomPropertyTemplateVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CustomPropertyTemplate"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/custom-properties/value-used": {
            "get": {
                "tags": [
                    "custom-properties"
                ],
                "operationId": "isValueUsed",
                "summary": "Determines if there is already an asset with a specified value of a custom property.",
                "description": "If no value is specified method will return false.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "customPropertyValue",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "property-name",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/custom-properties/{item-id}/definitions": {
            "get": {
                "tags": [
                    "custom-properties"
                ],
                "operationId": "getCustomPropertyDefinitionsForItem",
                "summary": "Returns the list of custom property definitions defined for the item.",
                "description": "Details regarding custom property definitions can be found <a href=\"services/CustomPropertyDefinitionVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "item UUID",
                        "name": "item-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CustomPropertyDefinition"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "tags": [
                    "customers"
                ],
                "operationId": "getCustomers",
                "summary": "Get all customers that the current user has access to",
                "description": "If the user requesting the data has the enabling-permission DESKTOP_CLIENT all customer data in the system that match the filtering options will be returned. \n              If not, the customers associated with the user will be returned. <br/>\n              Details regarding the exposed objects and their properties can be found <a href=\"services/CustomerVO.html\">here</a>.\n              Filtering and paging options are supported only for requests done by non-customer users",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "location or room uuid, can be empty to search among all customers",
                        "name": "place-id",
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "name": "q",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "description": "whether to search only customers activated in portal, if not specified, the default is false",
                        "name": "only-active",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "description": "whether to search only customers with existing users, if not specified, the default is false",
                        "name": "only-with-users",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "description": "number of page, can be null, then all results are returned",
                        "name": "page-index",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "description": "number of customers in page, can be null, then all results are returned",
                        "name": "page-size",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Customer"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "customers"
                ],
                "operationId": "addCustomers",
                "summary": "Adds the customers given in the argument.",
                "description": "This operation requires the user to be operations user.<br/>\n              Details regarding the exposed objects and their properties can be found <a href=\"services/CustomerVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "The customers that should be added to the system",
                        "name": "customers",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Customer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Customer"
                            }
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/customers/customer-states": {
            "get": {
                "tags": [
                    "customers"
                ],
                "operationId": "getAllCustomerStates",
                "summary": "Get all defined customer states",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CustomerState"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/customers/{customer-id}": {
            "get": {
                "tags": [
                    "customers"
                ],
                "operationId": "getCustomer",
                "summary": "Get customer with the given id",
                "description": "If the user requesting the data is operations user or the user is associated with the customer the data will be returned.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the customer that should be returned",
                        "name": "customer-id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "customers"
                ],
                "operationId": "deleteCustomer",
                "summary": "Delete customer with the given id",
                "description": "This operation requires the user to be operations user",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the customer that should be deleted",
                        "name": "customer-id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "customers"
                ],
                "operationId": "updateCustomer",
                "summary": "Updates customers with the given id.",
                "description": "If the user is operations user the customer will be updated. The id of the customer can not be updated.<br/>\n              Details regarding the exposed objects and their properties can be found <a href=\"services/CustomerVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the customer that should be updated",
                        "name": "customer-id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "the updated customer",
                        "name": "customer",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                }
            }
        },
        "/customers-count": {
            "get": {
                "tags": [
                    "customers-count"
                ],
                "operationId": "getCustomersCountInLocationsAndRooms",
                "summary": "Get number of customers in child locations and rooms of specified root location\n matching the given filtering options",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "root location id",
                        "name": "root-location-id",
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "name": "q",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "description": "whether to search only customers activated in portal, if not specified, the default is false",
                        "name": "only-active",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "description": "whether to search only customers with existing users, if not specified, the default is false",
                        "name": "only-with-users",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CustomersCount"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/equipment-browser/report": {
            "post": {
                "tags": [
                    "equipment-browser"
                ],
                "operationId": "downloadReport",
                "summary": "Generates report with assets found based on equipment query",
                "description": "Fetch a file stream with CSV content",
                "produces": [
                    "application/octet-stream"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "- consists of columns to include in the report, equipment query in string format and user browser timezone difference from UTC in minutes",
                        "name": "reportParameters",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReportParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/equipment-browser/results": {
            "post": {
                "tags": [
                    "equipment-browser"
                ],
                "operationId": "findPage",
                "summary": "Returns next assets matching given query",
                "description": "Finds assets matching all of specified filters and sorts results in specified order.\n Assets are returned along with custom properties and their navigation path.\n\n <p>Intended to be used in infinite scrolling. Pagination is done by passing previously seen offset and amount of assets to be returned.</p>",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "query to execute",
                        "name": "equipmentQuery",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "description": "offset of last seen item (got from previous response)",
                        "name": "lastSeenOffset",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "description": "maximum number of assets to be returned",
                        "name": "limit",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageResultVO"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            },
            "put": {
                "tags": [
                    "equipment-browser"
                ],
                "operationId": "editAssets",
                "summary": "Updates assets with given parameters",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "editPayload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EquipmentBrowserEditPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request - for use of this method on eq. other than data center item\n                  - for creating incorrect JSON patch operation descriptor"
                    },
                    "403": {
                        "description": "Forbidden - for use of this method on eq. without proper equipment privileges"
                    },
                    "405": {
                        "description": "Not allowed - for use of this method on electrical components"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/etl-configuration/configuration": {
            "get": {
                "tags": [
                    "etl-configuration"
                ],
                "operationId": "getEtlConfigurations",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Get a list of ETL configurations",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EtlConfigurationVO"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "etl-configuration"
                ],
                "operationId": "addEtlConfiguration",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Add an ETL configuration.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "The configuration to add",
                        "name": "etlConfiguration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EtlConfigurationVO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "$ref": "#/definitions/EtlConfigurationVO"
                        }
                    }
                }
            }
        },
        "/etl-configuration/configuration/{configuration-id}": {
            "put": {
                "tags": [
                    "etl-configuration"
                ],
                "operationId": "updateEtlConfiguration",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Update an ETL configuration.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "The id of the configuration that should be updated",
                        "name": "configuration-id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "The updated configuration",
                        "name": "etlConfiguration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EtlConfigurationVO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "$ref": "#/definitions/EtlConfigurationVO"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "etl-configuration"
                ],
                "operationId": "removeEtlConfiguration",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Remove the ETL configuration with the spcificed configurationId.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "The id of the configuration that should be deleted",
                        "name": "configuration-id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                }
            }
        },
        "/etl-configuration/dialect": {
            "get": {
                "tags": [
                    "etl-configuration"
                ],
                "operationId": "getAvailableDialects",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Get all driver dialect references",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DialectInformationVO"
                            }
                        }
                    }
                }
            }
        },
        "/etl-configuration/driver": {
            "get": {
                "tags": [
                    "etl-configuration"
                ],
                "operationId": "getAvailableDrivers",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Get all driver references",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DriverInformationVO"
                            }
                        }
                    }
                }
            }
        },
        "/etl-configuration/schedule/now/{configuration-id}": {
            "post": {
                "tags": [
                    "etl-configuration"
                ],
                "operationId": "scheduleNow",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Commands a specific ETL configuration to schedule its job.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "The id of the configuration",
                        "name": "configuration-id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                }
            }
        },
        "/etl-configuration/schedulerInfo": {
            "get": {
                "tags": [
                    "etl-configuration"
                ],
                "operationId": "getEtlSchedulerInfos",
                "description": "Gets information about scheduled/running ETL jobs",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Gets information about scheduled/running ETL jobs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EtlSchedulerInfoVO"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not authorized"
                    }
                }
            }
        },
        "/etl-configuration/transformation": {
            "get": {
                "tags": [
                    "etl-configuration"
                ],
                "operationId": "getAvailableTransformations",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Get transformation references",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "include-drafts",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EtlTransformationVO"
                            }
                        }
                    }
                }
            }
        },
        "/etl-configuration/transformation/{configuration-type}": {
            "post": {
                "tags": [
                    "etl-configuration"
                ],
                "operationId": "uploadTransformations",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Upload a new transformation",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "in": "formData",
                        "description": "A blob containing files defining a transformation",
                        "name": "transformationFile",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "in": "path",
                        "name": "configuration-type",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Import",
                            "Export"
                        ]
                    },
                    {
                        "in": "query",
                        "name": "include-drafts",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EtlTransformationVO"
                            }
                        }
                    }
                }
            }
        },
        "/genomes": {
            "get": {
                "tags": [
                    "genomes"
                ],
                "operationId": "searchGenomes",
                "summary": "Query for genomes",
                "description": "All the parameters are optional filters.<br/>\n              Details regarding the exposed objects and their properties can be found <a href=\"services/GenomeVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "Filters the genomes based on this string.",
                        "name": "query",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "description": "Filters the genomes based on the given mountTypes.",
                        "name": "type",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "FLOOR_MOUNTABLE",
                                "RACK_MOUNTABLE",
                                "BLADE_ENCLOSURE_MOUNTABLE",
                                "SWITCH_ENCLOSURE_MOUNTABLE",
                                "SHELF_MOUNTABLE"
                            ]
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "in": "query",
                        "description": "Specifies where to look up genomes. This can be the Genome Library or the user specific Genomes.",
                        "name": "source",
                        "type": "string",
                        "enum": [
                            "LIBRARY",
                            "USER"
                        ]
                    },
                    {
                        "in": "query",
                        "name": "genomes",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "AIR_COOLED_CHILLER",
                                "ATS",
                                "BATTERY",
                                "BLADE",
                                "BLADE_ENCLOSURE",
                                "BLOCK",
                                "BREAKER",
                                "BREAKER_MODULE",
                                "BUNDLE_FLOOR",
                                "CACS",
                                "CAMERA",
                                "CDU",
                                "CHILLER",
                                "CONDENSER",
                                "COOLINGTOWER",
                                "CRAC",
                                "CRACFAN",
                                "CRAH",
                                "DOOR",
                                "DRIVE_ARRAY",
                                "DRYCOOLER",
                                "ENVIRONMENTAL_EQUIPMENT",
                                "ENVIRONMENTAL_POWER_EQUIPMENT",
                                "EPO",
                                "FIRE_SUPPRESSION",
                                "GAP",
                                "GENERATOR",
                                "GENERIC_POWERED_FLOORMOUNTABLE",
                                "HACS",
                                "INROOM",
                                "ISX_MANAGER",
                                "LADDER",
                                "LAYER1_NETWORK_GEAR",
                                "LAYER2_NETWORK_GEAR",
                                "LAYER3_NETWORK_GEAR",
                                "NETBOTZ_CENTRAL",
                                "NETWORK",
                                "NETWORK_CABLE",
                                "NONEPOWERED_FLOORMOUNTABLE",
                                "NONEPOWERED_RACKMOUNTABLE",
                                "OVERHEAD_COOLING_UNIT",
                                "PAC",
                                "PDU",
                                "RECTIFIER",
                                "PERFORATED_CEILING_TILE",
                                "PERFORATED_TILE",
                                "PERFORATED_TILES_4X",
                                "PERFORATED_TILES_8X",
                                "PERSON",
                                "POWER_PANEL",
                                "POWER_RECEPTACLE",
                                "PUMP",
                                "RACK",
                                "RACS",
                                "RDP",
                                "ROW",
                                "SERVER",
                                "SHELF",
                                "SWITCHGEAR",
                                "SWITCH_ENCLOSURE",
                                "SWITCH_MODULE",
                                "TELECOM",
                                "UPS",
                                "VERTICAL_GRILLE",
                                "WATER_TANK",
                                "WALL",
                                "WINDOW"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GenomeVO"
                            }
                        }
                    },
                    "400": {
                        "description": "Illegal argument"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/genomes/{genome-id}": {
            "get": {
                "tags": [
                    "genomes"
                ],
                "operationId": "getGenome",
                "summary": "Get the genome with the given id",
                "description": "This method is currently in an experimental state, and its functionality is thus disabled.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the genome that should be returned",
                        "name": "genome-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "description": "Specifies where to look up genomes. This can be the Genome Library or the user specific Genomes.",
                        "name": "source",
                        "type": "string",
                        "enum": [
                            "LIBRARY",
                            "USER"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GenomeVO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission"
                    },
                    "404": {
                        "description": "Genome not found"
                    }
                }
            }
        },
        "/kpis": {
            "get": {
                "tags": [
                    "kpis"
                ],
                "operationId": "getHistory",
                "summary": "Query for KPIs for an asset with the given asset-id",
                "description": "Query for KPIs of the given types for the given period for a specified asset.<br/>\n              Available types are:<br/>\n              <ul>\n              <li>TOTAL_U_SPACE - The total rack u-space</li>\n              <li>TOTAL_WEIGHT - The total weight of equipment</li>\n              <li>SERVER_QUANTITY - The number of servers mounted in racks</li>\n              <li>TOTAL_NETWORK_PORTS - The total number of network ports on switches</li>\n              <li>ROOM_AREA - Room total area</li>\n              <li>FLOOR_MOUNTED_AREA - Room floor standing equipment total area</li>\n              <li>REVENUE_SPACE - Cages area in room</li>\n              <li>SELLABLE_AREA - Sellable area: sum of open, closed and reserved area</li>\n              <li>SPACE_UTILIZATION - Sellable area as a percentage of total room area</li>\n              <li>SOLD_SPACE - Room area sold to customers</li>\n              <li>OPEN_SPACE - Room area open for new customers</li>\n              <li>INTERNAL_SPACE - Internal area in room</li>\n              <li>RESERVED_SPACE - Area in room reserved for potential customers</li>\n              <li>ROOM_TOTAL_RACKS - Total racks number in room</li>\n              <li>TOTAL_STANDALONE_RACKS - Number of total racks in room</li>\n              <li>CLOSED_RACKS - Racks in room sold to customers</li>\n              <li>OPEN_RACKS - Racks in room open for new customers</li>\n              <li>INTERNAL_RACKS - Racks in room for internal usage</li>\n              <li>RESERVED_RACKS - Racks reserved for potential customers</li>\n              <li>RACKS_UTILIZATION - Racks utilization percentage in room. Racks utilization is sum of open, closed and reserved racks divided by total number of racks.</li>\n              <li>CLOSED_STANDALONE_RACKS - Racks in room sold to customers. Only standalone (outside cages) racks are counted</li>\n              <li>OPEN_STANDALONE_RACKS - Racks in room open for new customers. Only standalone (outside cages) racks are counted</li>\n              <li>INTERNAL_STANDALONE_RACKS - Racks in room for internal usage. Only standalone (outside cages) racks are counted</li>\n              <li>RESERVED_STANDALONE_RACKS - Racks in room reserved for potential customers. Only standalone (outside cages) racks are counted</li>\n              <li>STANDALONE_RACKS_UTILIZATION - Racks in room utilization percentage. Only standalone (outside cages) racks are counted</li>\n              <li>TOTAL_CONTRACTED_POWER - Total power sold to customers for all equipment in a room</li>\n              <li>POWER_CONTRACTED_WITH_CUSTOMERS - Power already sold to customers for all equipment in a room</li>\n              <li>POWER_RESERVED_FOR_CUSTOMERS - Power reserved for potential customers for all equipment in a room</li>\n              </ul>\n              <h2>Requires Capacity license</h2>\n              <ul>\n              <li>USED_POWER_OUTLET_CAPACITY - Gets used power outlet capacity grouped by outlet type</li>\n              <li>TOTAL_POWER_OUTLET_CAPACITY - Gets the power total outlet capacity grouped by outlet type</li>\n              <li>FREE_POWER_OUTLET_CAPACITY - Gets free power outlet capacity grouped by outlet type</li>\n              <li>AVAILABLE_U_SPACE - The currently available rack u-space</li>\n              <li>TOTAL_USED_U_SPACE - The currently used rack u-space</li>\n              <li>RESERVED_U_SPACE - The rack u-space currently reserved by planned changes</li>\n              <li>COOLER_LOAD - The calculated load of coolers</li>\n              <li>COOLER_CAPACITY - The total capacity of coolers</li>\n              <li>INLET_TEMPERATURE - The calculated inlet temperature</li>\n              <li>AMBIENT_TEMPERATURE - The calculated ambient (\"background\") temperature. This is the temperature in the room when not in the immediate vicinity of racks, coolers etc.</li>\n              <li>HOT_AISLE_CAPTURE_INDEX - The hot aisle capture index</li>\n              <li>COLD_AISLE_CAPTURE_INDEX - The cold aisle capture index</li>\n              <li>AVAILABLE_NETWORK_PORTS - The number of available network ports on switches</li>\n              <li>AVAILABLE_FIBER_NETWORK_PORTS - The number of available fiber network ports on switches</li>\n              <li>AVAILABLE_COPPER_NETWORK_PORTS - The number of available copper network ports on switches</li>\n              <li>AVAILABLE_OTHER_NETWORK_PORTS - The number of available other (neither fiber nor copper) network ports on switches</li>\n              <li>USED_FIBER_NETWORK_PORTS - The number of used fiber network ports on switches</li>\n              <li>USED_COPPER_NETWORK_PORTS - The number of used copper network ports on switches</li\n              <li>USED_OTHER_NETWORK_PORTS - The number of used other (neither fiber nor copper) network ports on switches</li>\n              <li>TOTAL_USED_NETWORK_PORTS - The number of used network ports on switches</li>\n              <li>AUXILIARY_LOAD_CONNECTED - Get the estimated load for auxiliary asset. This is asset that is not in racks, such as coolers</li>\n              <li>NAMEPLATE_LOAD - Get the load for assets in asset based on nameplate</li>\n              <li>ESTIMATED_LOAD - Get the estimated load for assets in asset based on power calculator</li>\n              <li>ESTIMATED_FAILOVER_LOAD - Estimated transferred load (a.k.a. failover load) on UPS</li>\n              <li>RESERVED_FOR_PSU_UNCERTAINTY - Capacity reserved for PSU uncertainty</li>\n              <li>RESERVED_FOR_DISTRIBUTION_REDUNDANCY - Capacity reserved for Distribution Redundancy</li>\n              <li>MEASURED_PEAK_LOAD - Measured peak (combined A and B feed) load on UPS</li>\n              <li>MEASURED_FAILOVER_LOAD - Measured transferred load (a.k.a. failover load) on UPS</li>\n              <li>POWER_CAPACITY - Power capacity for UPS</li>\n              <li>ESTIMATED_LOAD_PER_TOP_LEVEL_ITEM - Estimated load per top level item</li>\n              <li>FAILOVER_LOAD_PER_TOP_LEVEL_ITEM - Failover load per top level item</li>\n              <li>RESERVED_FOR_PSU_UNCERTAINTY_PER_TOP_LEVEL_ITEM - PSU uncertainty per top level racks item</li>\n              <li>MEASURED_FOR_TOP_LEVEL_ITEM_AVERAGE - Gets the measured average power per rack top level items</li>\n              <li>MEASURED_FOR_TOP_LEVEL_ITEM_PEAK - Gets the measured peak power per rack top level items</li>\n              </ul>\n              <h2>Requires Energy Efficiency license</h2>\n              <ul>\n              <li>PUE - The PUE</li>\n              </ul>\n              <h2>Requires IT Optimize license</h2>\n              <ul>\n              <li>NOT_ASSOCIATED_IT_ASSETS - Number of unplaced / not associated devices from IT Optimize</li>\n              <li>IT_ASSET_POWER_UTILIZATION - Get the power utilization (sum of associated averages)</li>\n              <li>IT_ASSET_CPU_UTILIZATION - The average CPU utilization</li>\n              <li>RETIREMENT_CANDIDATES - Number of retirement candidates</li>\n              <li>CONSOLIDATION_CANDIDATES - Number of consolidation candidates</li>\n              <li>IT_ASSET_COST - The Power Costs</li>\n              <li>IT_ASSET_COST_PER_TAG - Power costs for all servers with a given tag, per room</li>\n              <li>TOTAL_IT_ASSETS - Number of servers and blades in a room</li>\n              <li>RETIREMENT_CANDIDATES_COST - The Power Costs for retirement candidates</li>\n              <li>CONSOLIDATION_CANDIDATE_COST - The Power Costs for consolidation candidates</li>\n              </ul>\n              <h2>Requires Change license</h2>\n              <ul>\n              <li>TOTAL_WORK_ORDERS - Total work orders</li>\n              <li>COMPLETED_WORK_ORDERS - Completed work orders</li>\n              <li>CANCELLED_WORK_ORDERS - Cancelled work orders</li>\n              <li>WORK_ORDERS_NOT_STARTED - Not started work orders, which are not overdue</li>\n              <li>OVERDUE_WORK_ORDERS - Overdue work orders</li>\n              <li>WORK_ORDERS_IN_PROGRESS - In progress work orders</li>\n              </ul>\n              <h2>Requires Cooling Optimize license</h2>\n              <ul>\n              <li>ABOVE_TEMPERATURE_THRESHOLD - Relative time that the temperature for a rack exceeds its threshold (with a higher value)</li>\n              <li>BELOW_TEMPERATURE_THRESHOLD - Relative time that the temperature for a rack exceeds its threshold (with a lower value)</li>\n              </ul>",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "the id of asset to get kpi for",
                        "name": "asset-id",
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "AVAILABLE_U_SPACE",
                                "TOTAL_U_SPACE",
                                "TOTAL_WEIGHT",
                                "RESERVED_U_SPACE",
                                "SERVER_QUANTITY",
                                "TOTAL_USED_U_SPACE",
                                "COOLER_LOAD",
                                "COOLER_CAPACITY",
                                "INLET_TEMPERATURE",
                                "AMBIENT_TEMPERATURE",
                                "HOT_AISLE_CAPTURE_INDEX",
                                "COLD_AISLE_CAPTURE_INDEX",
                                "ABOVE_TEMPERATURE_THRESHOLD",
                                "BELOW_TEMPERATURE_THRESHOLD",
                                "AVAILABLE_NETWORK_PORTS",
                                "TOTAL_NETWORK_PORTS",
                                "AVAILABLE_FIBER_NETWORK_PORTS",
                                "AVAILABLE_COPPER_NETWORK_PORTS",
                                "AVAILABLE_OTHER_NETWORK_PORTS",
                                "USED_FIBER_NETWORK_PORTS",
                                "USED_COPPER_NETWORK_PORTS",
                                "USED_OTHER_NETWORK_PORTS",
                                "TOTAL_USED_NETWORK_PORTS",
                                "AUXILIARY_LOAD_CONNECTED",
                                "MEASURED_PEAK_LOAD",
                                "MEASURED_FAILOVER_LOAD",
                                "MEASURED_PEAK_LOAD_PER_PHASE",
                                "NAMEPLATE_LOAD",
                                "ESTIMATED_LOAD",
                                "POWER_NEEDED",
                                "ESTIMATED_FAILOVER_LOAD",
                                "RESERVED_FOR_PSU_UNCERTAINTY",
                                "RESERVED_FOR_DISTRIBUTION_REDUNDANCY",
                                "POWER_CAPACITY",
                                "ESTIMATED_LOAD_PER_TOP_LEVEL_ITEM",
                                "FAILOVER_LOAD_PER_TOP_LEVEL_ITEM",
                                "RESERVED_FOR_PSU_UNCERTAINTY_PER_TOP_LEVEL_ITEM",
                                "MEASURED_FOR_TOP_LEVEL_ITEM_AVERAGE",
                                "MEASURED_FOR_TOP_LEVEL_ITEM_PEAK",
                                "UNCONNECTED_POWER_CONSUMERS_LOAD",
                                "PUE",
                                "TOTAL_WORK_ORDERS",
                                "COMPLETED_WORK_ORDERS",
                                "CANCELLED_WORK_ORDERS",
                                "WORK_ORDERS_NOT_STARTED",
                                "OVERDUE_WORK_ORDERS",
                                "WORK_ORDERS_IN_PROGRESS",
                                "IT_ASSET_POWER_UTILIZATION",
                                "IT_ASSET_CPU_UTILIZATION",
                                "RETIREMENT_CANDIDATES",
                                "CONSOLIDATION_CANDIDATES",
                                "TOTAL_IT_ASSETS",
                                "NOT_ASSOCIATED_IT_ASSETS",
                                "IT_ASSET_COST",
                                "RETIREMENT_CANDIDATES_COST",
                                "CONSOLIDATION_CANDIDATE_COST",
                                "IT_ASSET_COST_PER_TAG",
                                "ROOM_AREA",
                                "FLOOR_MOUNTED_AREA",
                                "REVENUE_SPACE",
                                "SELLABLE_AREA",
                                "SPACE_UTILIZATION",
                                "SOLD_SPACE",
                                "OPEN_SPACE",
                                "INTERNAL_SPACE",
                                "RESERVED_SPACE",
                                "TOTAL_RACKS",
                                "TOTAL_STANDALONE_RACKS",
                                "CLOSED_RACKS",
                                "OPEN_RACKS",
                                "INTERNAL_RACKS",
                                "RESERVED_RACKS",
                                "RACKS_UTILIZATION",
                                "CLOSED_STANDALONE_RACKS",
                                "OPEN_STANDALONE_RACKS",
                                "INTERNAL_STANDALONE_RACKS",
                                "RESERVED_STANDALONE_RACKS",
                                "STANDALONE_RACKS_UTILIZATION",
                                "TOTAL_CONTRACTED_POWER",
                                "POWER_CONTRACTED_WITH_CUSTOMERS",
                                "POWER_RESERVED_FOR_CUSTOMERS",
                                "USED_POWER_OUTLET_CAPACITY",
                                "TOTAL_POWER_OUTLET_CAPACITY",
                                "FREE_POWER_OUTLET_CAPACITY"
                            ]
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "in": "query",
                        "description": "Excludes entries older than this date. Only timespan of max 1 year is allowed. Defaults to 1 month from 'to' param if not specified. Format: Unix timestamp in\n        milliseconds.",
                        "name": "from",
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "query",
                        "description": "Excludes entries newer than this date. Only timespan of max 1 year is allowed. Defaults to today if not specified. Format: Unix timestamp in milliseconds.",
                        "name": "to",
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/KPI"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/kpis/latest": {
            "get": {
                "tags": [
                    "kpis"
                ],
                "operationId": "getLatestKpis",
                "summary": "Query for latest KPIs for an asset with the given asset-id",
                "description": "Query for latest KPIs of the given types<br/>",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "the id of asset to get kpi for",
                        "name": "asset-id",
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "AVAILABLE_U_SPACE",
                                "TOTAL_U_SPACE",
                                "TOTAL_WEIGHT",
                                "RESERVED_U_SPACE",
                                "SERVER_QUANTITY",
                                "TOTAL_USED_U_SPACE",
                                "COOLER_LOAD",
                                "COOLER_CAPACITY",
                                "INLET_TEMPERATURE",
                                "AMBIENT_TEMPERATURE",
                                "HOT_AISLE_CAPTURE_INDEX",
                                "COLD_AISLE_CAPTURE_INDEX",
                                "ABOVE_TEMPERATURE_THRESHOLD",
                                "BELOW_TEMPERATURE_THRESHOLD",
                                "AVAILABLE_NETWORK_PORTS",
                                "TOTAL_NETWORK_PORTS",
                                "AVAILABLE_FIBER_NETWORK_PORTS",
                                "AVAILABLE_COPPER_NETWORK_PORTS",
                                "AVAILABLE_OTHER_NETWORK_PORTS",
                                "USED_FIBER_NETWORK_PORTS",
                                "USED_COPPER_NETWORK_PORTS",
                                "USED_OTHER_NETWORK_PORTS",
                                "TOTAL_USED_NETWORK_PORTS",
                                "AUXILIARY_LOAD_CONNECTED",
                                "MEASURED_PEAK_LOAD",
                                "MEASURED_FAILOVER_LOAD",
                                "MEASURED_PEAK_LOAD_PER_PHASE",
                                "NAMEPLATE_LOAD",
                                "ESTIMATED_LOAD",
                                "POWER_NEEDED",
                                "ESTIMATED_FAILOVER_LOAD",
                                "RESERVED_FOR_PSU_UNCERTAINTY",
                                "RESERVED_FOR_DISTRIBUTION_REDUNDANCY",
                                "POWER_CAPACITY",
                                "ESTIMATED_LOAD_PER_TOP_LEVEL_ITEM",
                                "FAILOVER_LOAD_PER_TOP_LEVEL_ITEM",
                                "RESERVED_FOR_PSU_UNCERTAINTY_PER_TOP_LEVEL_ITEM",
                                "MEASURED_FOR_TOP_LEVEL_ITEM_AVERAGE",
                                "MEASURED_FOR_TOP_LEVEL_ITEM_PEAK",
                                "UNCONNECTED_POWER_CONSUMERS_LOAD",
                                "PUE",
                                "TOTAL_WORK_ORDERS",
                                "COMPLETED_WORK_ORDERS",
                                "CANCELLED_WORK_ORDERS",
                                "WORK_ORDERS_NOT_STARTED",
                                "OVERDUE_WORK_ORDERS",
                                "WORK_ORDERS_IN_PROGRESS",
                                "IT_ASSET_POWER_UTILIZATION",
                                "IT_ASSET_CPU_UTILIZATION",
                                "RETIREMENT_CANDIDATES",
                                "CONSOLIDATION_CANDIDATES",
                                "TOTAL_IT_ASSETS",
                                "NOT_ASSOCIATED_IT_ASSETS",
                                "IT_ASSET_COST",
                                "RETIREMENT_CANDIDATES_COST",
                                "CONSOLIDATION_CANDIDATE_COST",
                                "IT_ASSET_COST_PER_TAG",
                                "ROOM_AREA",
                                "FLOOR_MOUNTED_AREA",
                                "REVENUE_SPACE",
                                "SELLABLE_AREA",
                                "SPACE_UTILIZATION",
                                "SOLD_SPACE",
                                "OPEN_SPACE",
                                "INTERNAL_SPACE",
                                "RESERVED_SPACE",
                                "TOTAL_RACKS",
                                "TOTAL_STANDALONE_RACKS",
                                "CLOSED_RACKS",
                                "OPEN_RACKS",
                                "INTERNAL_RACKS",
                                "RESERVED_RACKS",
                                "RACKS_UTILIZATION",
                                "CLOSED_STANDALONE_RACKS",
                                "OPEN_STANDALONE_RACKS",
                                "INTERNAL_STANDALONE_RACKS",
                                "RESERVED_STANDALONE_RACKS",
                                "STANDALONE_RACKS_UTILIZATION",
                                "TOTAL_CONTRACTED_POWER",
                                "POWER_CONTRACTED_WITH_CUSTOMERS",
                                "POWER_RESERVED_FOR_CUSTOMERS",
                                "USED_POWER_OUTLET_CAPACITY",
                                "TOTAL_POWER_OUTLET_CAPACITY",
                                "FREE_POWER_OUTLET_CAPACITY"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/KPI"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/kpis/multi-series": {
            "get": {
                "tags": [
                    "kpis"
                ],
                "operationId": "getMultiSeriesKpi",
                "summary": "Query for latest multi series KPI for an asset with the given asset-id",
                "description": "Query for KPI of the given types<br/>",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "the id of asset to get kpi for",
                        "name": "asset-id",
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "type": "string",
                        "enum": [
                            "AVAILABLE_U_SPACE",
                            "TOTAL_U_SPACE",
                            "TOTAL_WEIGHT",
                            "RESERVED_U_SPACE",
                            "SERVER_QUANTITY",
                            "TOTAL_USED_U_SPACE",
                            "COOLER_LOAD",
                            "COOLER_CAPACITY",
                            "INLET_TEMPERATURE",
                            "AMBIENT_TEMPERATURE",
                            "HOT_AISLE_CAPTURE_INDEX",
                            "COLD_AISLE_CAPTURE_INDEX",
                            "ABOVE_TEMPERATURE_THRESHOLD",
                            "BELOW_TEMPERATURE_THRESHOLD",
                            "AVAILABLE_NETWORK_PORTS",
                            "TOTAL_NETWORK_PORTS",
                            "AVAILABLE_FIBER_NETWORK_PORTS",
                            "AVAILABLE_COPPER_NETWORK_PORTS",
                            "AVAILABLE_OTHER_NETWORK_PORTS",
                            "USED_FIBER_NETWORK_PORTS",
                            "USED_COPPER_NETWORK_PORTS",
                            "USED_OTHER_NETWORK_PORTS",
                            "TOTAL_USED_NETWORK_PORTS",
                            "AUXILIARY_LOAD_CONNECTED",
                            "MEASURED_PEAK_LOAD",
                            "MEASURED_FAILOVER_LOAD",
                            "MEASURED_PEAK_LOAD_PER_PHASE",
                            "NAMEPLATE_LOAD",
                            "ESTIMATED_LOAD",
                            "POWER_NEEDED",
                            "ESTIMATED_FAILOVER_LOAD",
                            "RESERVED_FOR_PSU_UNCERTAINTY",
                            "RESERVED_FOR_DISTRIBUTION_REDUNDANCY",
                            "POWER_CAPACITY",
                            "ESTIMATED_LOAD_PER_TOP_LEVEL_ITEM",
                            "FAILOVER_LOAD_PER_TOP_LEVEL_ITEM",
                            "RESERVED_FOR_PSU_UNCERTAINTY_PER_TOP_LEVEL_ITEM",
                            "MEASURED_FOR_TOP_LEVEL_ITEM_AVERAGE",
                            "MEASURED_FOR_TOP_LEVEL_ITEM_PEAK",
                            "UNCONNECTED_POWER_CONSUMERS_LOAD",
                            "PUE",
                            "TOTAL_WORK_ORDERS",
                            "COMPLETED_WORK_ORDERS",
                            "CANCELLED_WORK_ORDERS",
                            "WORK_ORDERS_NOT_STARTED",
                            "OVERDUE_WORK_ORDERS",
                            "WORK_ORDERS_IN_PROGRESS",
                            "IT_ASSET_POWER_UTILIZATION",
                            "IT_ASSET_CPU_UTILIZATION",
                            "RETIREMENT_CANDIDATES",
                            "CONSOLIDATION_CANDIDATES",
                            "TOTAL_IT_ASSETS",
                            "NOT_ASSOCIATED_IT_ASSETS",
                            "IT_ASSET_COST",
                            "RETIREMENT_CANDIDATES_COST",
                            "CONSOLIDATION_CANDIDATE_COST",
                            "IT_ASSET_COST_PER_TAG",
                            "ROOM_AREA",
                            "FLOOR_MOUNTED_AREA",
                            "REVENUE_SPACE",
                            "SELLABLE_AREA",
                            "SPACE_UTILIZATION",
                            "SOLD_SPACE",
                            "OPEN_SPACE",
                            "INTERNAL_SPACE",
                            "RESERVED_SPACE",
                            "TOTAL_RACKS",
                            "TOTAL_STANDALONE_RACKS",
                            "CLOSED_RACKS",
                            "OPEN_RACKS",
                            "INTERNAL_RACKS",
                            "RESERVED_RACKS",
                            "RACKS_UTILIZATION",
                            "CLOSED_STANDALONE_RACKS",
                            "OPEN_STANDALONE_RACKS",
                            "INTERNAL_STANDALONE_RACKS",
                            "RESERVED_STANDALONE_RACKS",
                            "STANDALONE_RACKS_UTILIZATION",
                            "TOTAL_CONTRACTED_POWER",
                            "POWER_CONTRACTED_WITH_CUSTOMERS",
                            "POWER_RESERVED_FOR_CUSTOMERS",
                            "USED_POWER_OUTLET_CAPACITY",
                            "TOTAL_POWER_OUTLET_CAPACITY",
                            "FREE_POWER_OUTLET_CAPACITY"
                        ]
                    },
                    {
                        "in": "query",
                        "name": "from",
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "query",
                        "name": "to",
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/KPISeries"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/licenses": {
            "get": {
                "tags": [
                    "licenses"
                ],
                "operationId": "getLicenses",
                "summary": "Get all information about installed license keys and their usage",
                "description": "This operation requires the enabling-permission SYSTEM_CONFIGURATION_ADMINISTRATOR.",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/License"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "licenses"
                ],
                "operationId": "addLicenseKeys",
                "summary": "Add license keys to the system",
                "description": "This operation requires the enabling-permission SYSTEM_CONFIGURATION_ADMINISTRATOR.<br/>\n              Details regarding the exposed objects and their properties can be found <a href=\"services/LicenseVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "Adds the given license keys",
                        "name": "keys",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/License"
                            }
                        }
                    },
                    "400": {
                        "description": "Unable to add license keys"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/licenses/{encoded-license-key}": {
            "delete": {
                "tags": [
                    "licenses"
                ],
                "operationId": "deleteLicenseKey",
                "summary": "Remove the license key from the system",
                "description": "This operation requires the enabling-permission SYSTEM_CONFIGURATION_ADMINISTRATOR.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "The license key that should be deleted. Encoded sha256+base64.",
                        "name": "encoded-license-key",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/mail": {
            "post": {
                "tags": [
                    "mail"
                ],
                "operationId": "sendMail",
                "summary": "Send an email",
                "description": "Send an email to one or more EcoStruxure IT Advisor users. Specify mail recipient as the EcoStruxure IT Advisor user's username.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "mail",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Mail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                }
            }
        },
        "/mail/settings": {
            "get": {
                "tags": [
                    "mail"
                ],
                "operationId": "getMailSettings",
                "summary": "Get EcoStruxure IT Advisor's current mail settings",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "$ref": "#/definitions/MailSettings"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "mail"
                ],
                "operationId": "updateMailSettings",
                "summary": "Update EcoStruxure IT Advisor's mail settings",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "mailSettings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MailSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "$ref": "#/definitions/MailSettings"
                        }
                    }
                }
            }
        },
        "/platform-status/job-queue": {
            "get": {
                "tags": [
                    "platform-status"
                ],
                "operationId": "listJobQueue",
                "summary": "<strong style=\"color:orange\">Internal</strong>",
                "description": "Get a list of platform jobs currently running or in queue",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JobVO"
                            }
                        }
                    }
                }
            }
        },
        "/platform-status/job-status": {
            "get": {
                "tags": [
                    "platform-status"
                ],
                "operationId": "listJobStatuses",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JobStatusVO"
                            }
                        }
                    }
                }
            }
        },
        "/powercapacity/asset-measurements": {
            "delete": {
                "tags": [
                    "powercapacity"
                ],
                "operationId": "deleteDeviceMeasurements",
                "summary": "Clean up power measurements for asset",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "asset-uuid",
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/powercapacity/system-measurements": {
            "delete": {
                "tags": [
                    "powercapacity"
                ],
                "operationId": "deleteSystemMeasurements",
                "summary": "Clean up power measurements for external system uuid",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "system-uuid",
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/powercapacity/{power-path-item-id}": {
            "get": {
                "tags": [
                    "powercapacity"
                ],
                "operationId": "getPowerCapacity",
                "summary": "Get power capacity results for specified power path item",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "uuid of the item to get values",
                        "name": "power-path-item-id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "description": "which values to get, possible options: MEASURED_DATA, CALCULATED_DATA",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "MEASURED_DATA",
                                "CALCULATED_DATA"
                            ]
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "in": "query",
                        "description": "if true, each power phase will have values for all series",
                        "name": "add-zero-values",
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PowerCapacityPerPhase"
                            }
                        }
                    }
                }
            }
        },
        "/powerpath/cables": {
            "get": {
                "tags": [
                    "powerpath"
                ],
                "operationId": "getPowerCablesInRack",
                "summary": "Get all internal power cables in the given rack",
                "description": "Only cables where both fromAssetId and toAssetId are in the requested rack will be included. \n              Each asset in the rack with at least one matching power connection will be included in the result map.\n              The key in the map is the id of the asset, and the value to the key is a list with power cables connected to or from the equipment",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "the id of the Rack to get power cables from",
                        "name": "rack-id",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "powerpath"
                ],
                "operationId": "addPowerCable",
                "summary": "Connect rack-mounted asset to a rack Pdu",
                "description": "A powercable will be created between the rack mount Pdu and the asset. The cable will be connected to the rack mount Pdu on the specified phase(s)",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "The power cable to add. After adding the cable the fromAssetId and toAssetId given in the cable will be connected on the given phase. \n                   The id in the power cable should not be set, it will be set on the server and returned in the result.\n                   At the moment the powerCable.fromAssetId needs to be a rack mount Pdu. \n                   At the moment the powerCable.toAssetId needs to be a rack mountable asset which cab act as a PowerConsumer",
                        "name": "powerCable",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PowerCable"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PowerCable"
                        }
                    },
                    "409": {
                        "description": "Conflict - thrown if outlet is already connected"
                    }
                }
            },
            "delete": {
                "tags": [
                    "powerpath"
                ],
                "operationId": "disconnectPowerCable",
                "summary": "Disconnect a power cable",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "the power cable to disconnect",
                        "name": "powerCable",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PowerCable"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "OK"
                    }
                }
            }
        },
        "/powerpath/colors": {
            "get": {
                "tags": [
                    "powerpath"
                ],
                "operationId": "getPowerPathColors",
                "summary": "Get color(s) of the power path for the given power consumer",
                "description": "The colors originates from the upstream Ups in the power path. \n              A power consumer is defined as an Asset with the property \"powerConsumer PowerConsumer\" declared.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "power-consumer-id",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PowerPathColor"
                            }
                        }
                    }
                }
            }
        },
        "/powerpath/power-connection-options": {
            "get": {
                "tags": [
                    "powerpath"
                ],
                "operationId": "getRackMountPduPowerConnectionOptionsInRackForAsset",
                "summary": "Get list of rack mount pdu id to power connection options.",
                "description": "Get list of rack mount pdu with power connection options. Power Connection Option includes rack mount pdus paired id and phases available on the rack mount Pdu for the given asset. \n          Only returns list of rack mount pdus inside the rack.\n          Input voltages for the asset is used to match against available phases on the rack mount Pdu upstream connections.\n          If asset-id is undefined, it will return list of rack mount pdu id with rack mount pdu pair id and an empty list of power phases.\n PowerPhases are sorted in this order: L1, L2, L3, L1_L2, L2_L3, L1_L3, L1_L2_L3",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "the id of the Rack to get power connection options from",
                        "name": "rack-id",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "description": "the id of the asset to get power phase information about",
                        "name": "asset-id",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RackMountPduPowerConnectionOptions"
                            }
                        }
                    }
                }
            }
        },
        "/powerpath/power-phases": {
            "get": {
                "tags": [
                    "powerpath"
                ],
                "operationId": "getAllowedPowerPhases",
                "summary": "Get list of power phases available on the rack mount Pdu for the given asset. Input voltages for the asset is used to match\n          against available phases on the rack mount Pdu upstream connections.",
                "description": "Get list of power phases available on the rack mount Pdu for the given asset. \n PowerPhases are sorted in this order: L1, L2, L3, L1_L2, L2_L3, L1_L3, L1_L2_L3",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "the id of the rack mount Pdu to get available power phases from",
                        "name": "rack-mount-pdu-id",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "description": "the id of the asset to find available power phases for",
                        "name": "asset-id",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "L1",
                                    "L2",
                                    "L3",
                                    "NONE",
                                    "L1_L2",
                                    "L1_L2_L3",
                                    "L1_L3",
                                    "L2_L3"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/routing/settings": {
            "get": {
                "tags": [
                    "routing"
                ],
                "operationId": "getRoutingSettings",
                "summary": "Get routing settings",
                "description": "Gets current routing settings from server",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CableTrayRoutingSettings"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            },
            "put": {
                "tags": [
                    "routing"
                ],
                "operationId": "updateRoutingSettings",
                "summary": "Updates routing settings",
                "description": "Updates routing settings on server to share configuration among users.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "settings that should be updated",
                        "name": "routingSettings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CableTrayRoutingSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                }
            }
        },
        "/sensormapping/associate": {
            "post": {
                "tags": [
                    "sensormapping"
                ],
                "operationId": "associateDataCenterEquipmentToExternalItem",
                "summary": "Associate DataCenterEquipment with external item <strong style=\"color:orange\">Internal</strong>",
                "description": "Associate DataCenterEquipment with external item based on UUIDs.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "data-center-equipment-uuid",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "external-item-uuid",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unable to associate device with PDU"
                    }
                }
            },
            "delete": {
                "tags": [
                    "sensormapping"
                ],
                "operationId": "unassociateDataCenterEquipment",
                "summary": "Unassociates DataCenterEquipment from all external items associated to it <strong style=\"color:orange\">Internal</strong>",
                "description": "Unassociate DataCenterEquipment from all external items associated to it",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "data-center-equipment-uuid",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unable to unassociate devices PDU"
                    }
                }
            }
        },
        "/sensormapping/externaldevice/pdus": {
            "get": {
                "tags": [
                    "sensormapping"
                ],
                "operationId": "getAllPduDevices",
                "summary": "Get all external PDU devices <strong style=\"color:orange\">Internal</strong>",
                "description": "Get all external PDU devices",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExternalItemVO"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested assets"
                    }
                }
            }
        },
        "/sensormapping/externaldevice/search": {
            "get": {
                "tags": [
                    "sensormapping"
                ],
                "operationId": "searchExternalDevice",
                "summary": "Search for external device <strong style=\"color:orange\">Internal</strong>",
                "description": "Search for external device by name",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ExternalItemVO"
                        }
                    },
                    "400": {
                        "description": "Unable to uniquely identify external device"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested assets"
                    }
                }
            }
        },
        "/sensormapping/pdu/num-phases-by-circuit": {
            "get": {
                "tags": [
                    "sensormapping"
                ],
                "operationId": "getNumPhasesByCircuit",
                "summary": "Get number of phases for a circuit on a specific panel on a specific circuit <strong style=\"color:orange\">Internal</strong>",
                "description": "Get number of phases for a circuit on a specific panel on a specific circuit",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "pdu-uuid",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "panel-name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "circuit",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested assets"
                    }
                }
            }
        },
        "/sensormapping/pdu/search": {
            "get": {
                "tags": [
                    "sensormapping"
                ],
                "operationId": "searchPdu",
                "summary": "Search for PDU <strong style=\"color:orange\">Internal</strong>",
                "description": "Search for PDU based on room name and PDU name.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "room",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "pdu",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unable to uniquely identify PDU"
                    },
                    "402": {
                        "description": "Multiple PDUs found"
                    }
                }
            }
        },
        "/sensormapping/sensormap": {
            "post": {
                "tags": [
                    "sensormapping"
                ],
                "operationId": "addDeviceSensorMapping",
                "summary": "Map sensor to to a circuit <strong style=\"color:orange\">Internal</strong>",
                "description": "Map current or power sensor to a circuit",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "external-item-uuid",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "pdu-uuid",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "panel-name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "circuit",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "sensor-id",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "factor",
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "in": "query",
                        "name": "sensor-category",
                        "type": "string",
                        "enum": [
                            "AMPS",
                            "POWER"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested assets"
                    }
                }
            }
        },
        "/sensormapping/sensormappings": {
            "post": {
                "tags": [
                    "sensormapping"
                ],
                "operationId": "addDeviceSensorMappings",
                "summary": "Map sensor to to a circuit (Bulk change)<strong style=\"color:orange\">Internal</strong>",
                "description": "Map current or power sensor to a circuit",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "addMappingVo",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddSensorMappingOperation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested assets"
                    }
                }
            }
        },
        "/sensormapping/updatefactor": {
            "post": {
                "tags": [
                    "sensormapping"
                ],
                "operationId": "updateFactor",
                "summary": "Update power factors based on connected breaker phases <strong style=\"color:orange\">Internal</strong>",
                "description": "Update power factors based on connected breaker phases",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "external-item-uuid",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "description": "Factor for power measurements for 1 phase",
                        "name": "power-factor-1",
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "in": "query",
                        "description": "Factor for power measurements for 2 phase",
                        "name": "power-factor-2",
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "in": "query",
                        "description": "Factor for power measurements for 3 phase",
                        "name": "power-factor-3",
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "in": "query",
                        "description": "Factor for amp measurements for 1 phase",
                        "name": "amp-factor-1",
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "in": "query",
                        "description": "Factor for amp measurements for 2 phase",
                        "name": "amp-factor-2",
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "in": "query",
                        "description": "Factor for amp measurements for 3 phase",
                        "name": "amp-factor-3",
                        "type": "number",
                        "format": "double"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested assets"
                    }
                }
            }
        },
        "/sensormapping/updatepowerfactors": {
            "post": {
                "tags": [
                    "sensormapping"
                ],
                "operationId": "updatePowerFactors",
                "summary": "Update power factors based on connected breaker phases (Bulk change)<strong style=\"color:orange\">Internal</strong>",
                "description": "Update power factors based on connected breaker phases",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "collection",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdatePowerFactorCollection"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized - Missing access permission for requested assets"
                    }
                }
            }
        },
        "/struxure-on": {
            "put": {
                "tags": [
                    "struxure-on"
                ],
                "operationId": "register",
                "summary": "Initiates StruxureOn onboarding.",
                "description": "Returns status with information on where to claim the EcoStruxure IT Advisors server",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RegistrationStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "patch": {
                "tags": [
                    "struxure-on"
                ],
                "operationId": "configure",
                "summary": "Configures StruxureOn connection details.",
                "description": "Configures connection settings to StruxureOn, parameter description and allowed values:\n              <ul>\n              <li>alarmRetrievalIntervalSeconds - how often to poll for alarms in seconds, between 60 and 1800\n              <li>deviceRetrievalIntervalSeconds - how often to poll for device changes in seconds, between 300 and 7200\n              <li>powerDataRetrievalIntervalSeconds - how often to poll for measured power values in seconds, between 300 and 7200\n              <li>powerDataSampleSizeDays - sample size for calculating trending of power measurements in days, between 3 and 60\n              </ul>",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "configuration object",
                        "name": "connectionConfig",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConnectionConfiguration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RegistrationStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "get": {
                "tags": [
                    "struxure-on"
                ],
                "operationId": "getStatus",
                "summary": "Determines onboarding status",
                "description": "Returns registration status",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RegistrationStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/svg/assetcontext": {
            "get": {
                "tags": [
                    "svg"
                ],
                "operationId": "getAssetContextSvg",
                "summary": "Given a list of assetIds generate an svg showing the whereabouts of the\n          assets within there parent container. It is assumed that all passed assets will\n          have the same parent - otherwise an error is thrown.\n \n          <strong style=\"color:red\">Experimental - do not use</strong>",
                "produces": [
                    "application/octet-stream",
                    "image/svg+xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "asset-ids",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/ByteArray"
                        }
                    }
                }
            }
        },
        "/user-groups": {
            "get": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "getGroups",
                "summary": "Returns all user groups the requesting user has access to.",
                "description": "If the user requesting the data has the enabling-permission USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR all user groups in the system will be\n              returned.<br/>\n              If the requesting user does not have the enabling-permission USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR but has the enabling-permission\n              CUSTOMER_USER_RIGHTS_ADMINISTRATOR user groups associated with only customers the requesting user is associated with will be returned. <br/>\n              If the requesting user does not have the enabling-permission USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR or the enabling-permission\n              CUSTOMER_USER_RIGHTS_ADMINISTRATOR only groups associated with the requesting user will be returned.<br/>\n              The include query parameter can have the following values:\n              <ul>\n              <li>permissions - the user groups permissions</li>\n              <li>users - the users in the groups that the requesting user has access to. See the users service for details on what users that can be accessed.</li>\n              </ul>\n              If permissions are requested with the \"include\" query parameter, any permissions depending on a license that is not installed will not be a part of the\n              permissions in the result.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "options that the user group object should be enriched with. See implementation notes for GET /user-groups for allowed values.",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "permissions",
                                "users"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "addGroup",
                "summary": "Creates user group",
                "description": "If the requesting user has the enabling permission CUSTOMER_USER_RIGHTS_ADMINISTRATOR and not the enabling permission\n              USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR it is required that the user group is related to one or more customers that the requesting user is also\n              related to. <br/>\n              The different permissions are described for the POST operation /users/{username}/permissions<br/>\n              The rules described in the PUT operation /users/{username} also applies for user groups.<br/>\n              The id is assigned by the system and must not be set when creating a new user group.<br/>\n              The name property is a required property.<br/>\n              Only users with usernames existing in the system can be included in the user group<br/>\n              Only customer-ids existing in the system can be used.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "the user group that should be added to the system",
                        "name": "group",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserGroup"
                        }
                    },
                    {
                        "in": "query",
                        "description": "options that the user group object returned should be enriched with. See implementation notes for GET /user-groups for allowed values.",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "permissions",
                                "users"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserGroup"
                        }
                    }
                }
            }
        },
        "/user-groups/customers/{customer-id}": {
            "get": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "getUserGroupsForCustomer",
                "summary": "Returns a specific customers user groups",
                "description": "The rules described in the GET operation /user-groups/ also applies for this operation.<br/>",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "customer-id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "permissions",
                                "users"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/user-groups/sso/default-group": {
            "get": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "getDefaultSingleSignOnGroup",
                "summary": "Get id of the user group currently selected as the default user group for SSO users",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "removeDefaultSingleSignOnGroup",
                "summary": "Undo selection of default SSO user group",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user-groups/sso/default-group/{group-id}": {
            "put": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "setDefaultSingleSignOnGroup",
                "summary": "Select user group with the given id as the default user group for SSO users",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "Id of the user group to set as default SSO user group",
                        "name": "group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user-groups/{user-group-id}": {
            "put": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "updateGroup",
                "summary": "Updates the user group to reflect the user group object",
                "description": "The rules described in the POST operation /user-groups/ also applies for updating user groups except the id can be set but not changed.<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the id of the user group that should be updated",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "what the user group should be updated to",
                        "name": "group",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserGroup"
                        }
                    },
                    {
                        "in": "query",
                        "description": "options that the user group object returned should be enriched with. See implementation notes for GET /user-groups for allowed values.",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "permissions",
                                "users"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "deleteGroup",
                "summary": "Deletes a user group with the given user-group-id",
                "description": "The rules described in the DELETE operation /users/{user-name} for users also applies for deleting user groups.<br/>",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the id of the user group that should be deleted",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "get": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "getGroup",
                "summary": "Returns a specific user group",
                "description": "The rules described in the GET operation /user-groups/ also applies for this operation.<br/>",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the id of the user group that should be returned",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "description": "options that the user group object should be enriched with. See implementation notes for GET /user-groups for allowed values.",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "permissions",
                                "users"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserGroup"
                        }
                    }
                }
            }
        },
        "/user-groups/{user-group-id}/customers": {
            "put": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "setCustomerIds",
                "summary": "Sets the user-groups customers.",
                "description": "The rules described in the POST operation /user-groups/ also applies for this operation.<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the user-group the customers should be added to.",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "ids of the customers that should be related to this user group.",
                        "name": "customerIds",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "post": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "addCustomerIds",
                "summary": "Adds the customer-ids to the user group",
                "description": "The rules described in the POST operation /user-groups/ also applies for this operation.<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the user-group the customer should be related to.",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "ids of the customers that should be related to this user-group.",
                        "name": "customerIds",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user-groups/{user-group-id}/customers/{customer-id}": {
            "delete": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "deleteCustomerFromGroup",
                "summary": "Remove a a customer from a user group.",
                "description": "The rules described in the POST operation /user-groups/ also applies for this operation.<br/>",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the user group the customer should be removed from",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "path",
                        "description": "id of the customer that should removed from the user group",
                        "name": "customer-id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user-groups/{user-group-id}/name": {
            "put": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "updateGroupName",
                "summary": "Changes the name of a user group",
                "description": "The rules described in the POST operation /user-groups/ also applies for this operation.<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "the new name the user group should have.",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "description": "the id of the user group whos name should be changed",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user-groups/{user-group-id}/permissions": {
            "put": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "setPermissionsForGroup",
                "summary": "Updates the permissions for the user group to the list of permissions",
                "description": "The rules described in the POST operation /user-groups/ also applies for this operation.<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the user-group-id of the group that should have the permissions added or updated",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "the array of permissions that should be added and/or updated",
                        "name": "permissions",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "post": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "addPermissionsToGroup",
                "summary": "Adds a permission to the user group with the given id.",
                "description": "The rules described in the POST operation /user-groups/ also applies for this operation.<br/>\n              Permissions are described in POST /user/{user-id}/permission/<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the user group the permission should be added to.",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "permissions that should be added to the user group",
                        "name": "permissionVO",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user-groups/{user-group-id}/permissions/{permission-id}": {
            "delete": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "deletePermissionFromGroup",
                "summary": "Removes the permission",
                "description": "The rules described in the POST operation /user-groups/ also applies for this operation.<br/>",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the user-group-id of the group that should have the permission removed",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "path",
                        "description": "the id of the permission that should be removed",
                        "name": "permission-id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "put": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "updatePermissionForGroup",
                "summary": "Updates the permission",
                "description": "The rules described in the POST operation /user-groups/ also applies for this operation.<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the id of the group that should have the permission updated",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "path",
                        "description": "the id of the permission that should be updated",
                        "name": "permission-id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "permissionVO",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user-groups/{user-group-id}/users": {
            "post": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "addUsersToGroup",
                "summary": "Add users to a user group",
                "description": "The rules described in the POST operation /user-groups/ also applies for this operation.<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "the usernames of the users that should be added to the group",
                        "name": "usernames",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "path",
                        "description": "the id of the user group the users should be added to.",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "put": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "setUsersForGroup",
                "summary": "Setting the users for a user group",
                "description": "The rules described in the POST operation /user-groups/ also applies for this operation.<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "the usernames of the users that should be the groups users",
                        "name": "usernames",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "path",
                        "description": "the id of the user group the users should be set for.",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "get": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "getUsersForGroup",
                "summary": "Get the usernames of the users in the user group",
                "description": "The rules described in the GET operation /user-groups/ also applies for this operation.<br/>",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the id of the user group the usernames are requested for.",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user-groups/{user-group-id}/users/{username}": {
            "delete": {
                "tags": [
                    "user-groups"
                ],
                "operationId": "deleteUserFromGroup",
                "summary": "Removes a user from the user user group",
                "description": "The rules described in the POST operation /user-groups/ also applies for this operation.<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user that should be removed from the user group",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "description": "the id of the user group that should have the user removed.",
                        "name": "user-group-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/user-message": {
            "get": {
                "tags": [
                    "user-message"
                ],
                "operationId": "getMessages",
                "summary": "Get messages",
                "description": "gets messages the current user has access to\n <p>if only-active flag is true, returns only active messages for the current Tenant user in the time specified;\n if current user is operation user, returns empty list\n <p>if only-active flag is false or not specified, gets all messages and time parameter is ignored; in this mode the method can\n be used only by operation user, otherwise invalid access response will be returned",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "optional filtering for only active messages for the current user",
                        "name": "only-active",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "description": "optional filtering used if onlyActive is true, to indicate what activation time of the messages the request is done for; \n if not specified, current time of the server time zone is used",
                        "name": "time",
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserMessage"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            },
            "post": {
                "tags": [
                    "user-message"
                ],
                "operationId": "addMessage",
                "summary": "Adds new message",
                "description": "Returns added message, available only for operation user",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "messageToAdd",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserMessage"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/user-message/{message-id}": {
            "get": {
                "tags": [
                    "user-message"
                ],
                "operationId": "getMessage",
                "summary": "Get message with the given id",
                "description": "Returns message if the user requesting has the operation permissions and the message exists",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "id of the message that should be returned",
                        "name": "message-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not existing"
                    }
                }
            },
            "put": {
                "tags": [
                    "user-message"
                ],
                "operationId": "updateMessage",
                "summary": "Updates message",
                "description": "Returns updated message, available only for operation user",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "uuid of the message to update",
                        "name": "message-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "Message to update",
                        "name": "message",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserMessage"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "patch": {
                "tags": [
                    "user-message"
                ],
                "operationId": "updateMessageCustomers",
                "summary": "Updates message customers list",
                "description": "Available only for operation user",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "uuid of the message to update",
                        "name": "message-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "uuids of customers to set",
                        "name": "customersUuids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user-message"
                ],
                "operationId": "deleteMessage",
                "summary": "Deletes message",
                "description": "Available only for operation user",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "uuid of the message to delete",
                        "name": "message-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/user-message/{message-id}/customers": {
            "get": {
                "tags": [
                    "user-message"
                ],
                "operationId": "getMessageCustomers",
                "summary": "Gets message customers list",
                "description": "Available only for operation user",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "message-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Customer"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "operationId": "getUsers",
                "summary": "Returns all users the requesting user has access to.",
                "description": "If the user requesting the users has the enabling-permission USER_RIGHTS_AND_AUTHENTICATION_ADMINISTRATOR all users in the system will be returned. If the user\n              requesting the users has the enabling-permission CUSTOMER_USER_RIGHTS_ADMINISTRATOR and not the enabling-permission USER_RIGHTS_AND_AUTHENTICATION_ADMINISTRATOR\n              all users associated with customers that the requesting user is associated with in the system will be returned. If the requesting user has none of the above\n              enabling-permissions only the requesting user is returned.<br/>\n              <h5><b>include parameter</b></h5><br/>\n              The include query parameter can have the following values:\n              <ul>\n              <li>permissions - the users permissions</li>\n              <li>user_groups - the user groups the user is in</li>\n              <li>customers - customers that are added to the user</li>\n              <li>preferences - the users preferences</li>\n              </ul>\n              If permissions are requested with the \"include\" query parameter, any permissions depending on a license that is not installed will not be a part of the\n              permissions in the result.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "users of the specified type are returned (customer or internal)",
                        "name": "user-type",
                        "type": "string",
                        "enum": [
                            "customer",
                            "internal"
                        ]
                    },
                    {
                        "in": "query",
                        "description": "options that the user object should be enriched with. See implementation notes for GET /users for allowed values.. See implementation notes for GET\n        /users for allowed values.",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "permissions",
                                "user_groups",
                                "customers",
                                "preferences"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "users"
                ],
                "operationId": "addUser",
                "summary": "Creates a user, and sends the password in an email, defined in the template.",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              If the requesting user has the enabling permission CUSTOMER_USER_RIGHTS_ADMINISTRATOR and not the enabling permission\n              USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR it is required that the user is related to one or more customers that the requesting user is also related\n              to.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "the user to add, and an email template for the message send to the new user. @PWD@ in the template will be replaced with the password generated for the new\n        user.",
                        "name": "createUser",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserCreation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/current": {
            "get": {
                "tags": [
                    "users"
                ],
                "operationId": "getCurrentUser",
                "summary": "Returns the requesting user",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "options that the user object should be enriched with. See implementation notes for GET /users for allowed values.",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "permissions",
                                "user_groups",
                                "customers",
                                "preferences"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        },
        "/users/sso": {
            "post": {
                "tags": [
                    "users"
                ],
                "operationId": "addSingleSignOnUser",
                "summary": "Creates a new user based on a JSON Web Token located in the request's header.",
                "description": "If the request header contains a valid JSON Web Token with information about the user, then a new user will be created.<br/>\n              The new user will be added as a member of the system's default single sign on user group. If no default single sign on group exists the user will not be created.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "description": "AUTHORIZATION header parameter with a valid JSON Web Token",
                        "name": "Authorization",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/{username}": {
            "get": {
                "tags": [
                    "users"
                ],
                "operationId": "getUser",
                "summary": "Returns the user with the given username",
                "description": "To get the user the requesting user needs to either have the enabling-permission USER_RIGHTS_AND_AUTHENTICATION_ADMINISTRATOR or the enabling-permission\n              CUSTOMER_USER_RIGHTS_ADMINISTRATOR and be related to all the customers the requested user is related to or be the requested user.<br/>",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user that should be returned",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "description": "options that the user object should be enriched with. See implementation notes for GET /users for allowed values.",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "permissions",
                                "user_groups",
                                "customers",
                                "preferences"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "operationId": "updateUser",
                "summary": "Updates user to reflect the user represented by the JSON payload",
                "description": "The different permissions are described for the POST operation /users/{username}/permissions<br/>\n              Users with the authenticationServerId set cannot update the email and fullName.<br/>\n              You can not update the username to the username of a user already in the system.<br/>\n              To assign the enabling-permission GENOME_LIBRARY_AND_NETWORK_CABLE_TYPE_ADMINISTRATOR it is also required to assign the enabling-permission\n              PLANNING_DATA_CENTER_AND_ASSET_PROVISIONING.<br/>\n              Asset-permissions can only be assigned if an asset with the given id exists in the system.<br/>\n              Customer-permissions can only be assigned if a customer with the given id exists in the system.<br/>\n              <h5><b>Users with enabling-permission USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR</b></h5><br/>\n              If the user requests an update of itself the user is not allowed to make an update that removes access to the enabling permission\n              USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR. This is required to avoid not having a user with the enabling permission\n              USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR in the system.<br/>\n              The authenticationServerId can only be updated by users with the enabling-permission USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR<br/>\n              <h5><b>Users with enabling-permission CUSTOMER_USER_RIGHTS_ADMINISTRATOR</b></h5><br/>\n              If the requesting user has the enabling permission CUSTOMER_USER_RIGHTS_ADMINISTRATOR and not the enabling-permission\n              USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR the following rules apply:\n              <ul>\n              <li>Only enabling-permissions that are assigned to the requesting user can be assigned</li>\n              <li>Only customer-permissions for customers that are related to the requesting user can be assigned</li>\n              <li>Only asset-permissions for assets the requesting user has access to can be assigned.</li>\n              <li>The requesting user can only update users related only to customers that the requesting user itself is related to.</li>\n              <li>Only customers related to the requesting user can be added to the user that is updated.</li>\n              </ul>\n              <h5><b>Other users</b></h5><br/>\n              If the requesting user has neither the enabling-permission USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR or CUSTOMER_USER_RIGHTS_ADMINISTRATOR,\n              permissions can not be updated and only the requesting user itself can be updated.<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user that should be updated",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "what the user should be updated to.",
                        "name": "user",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "operationId": "deleteUser",
                "summary": "Deletes a user with the given username",
                "description": "A user can not delete itself.<br/>\n              To delete a user the requesting user need the enabling-permission USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR or CUSTOMER_USER_RIGHTS_ADMINISTRATOR.<br/>\n              If the requesting user has the enabling-permission CUSTOMER_USER_RIGHTS_ADMINISTRATOR and not the enabling-permission\n              USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR the user can only be deleted if the user only is related to customers that the requesting user also is\n              related to.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user that should be deleted",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/{username}/authentication-server": {
            "put": {
                "tags": [
                    "users"
                ],
                "operationId": "setAuthenticationsServerId",
                "summary": "Update the authentication server the user is authenticated against <br/>",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "username of the user whos authentication server should be updated",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "id of the authentication server that this user should be authenticated against",
                        "name": "authenticationServerId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "operationId": "deleteAuthenticationsServerId",
                "summary": "Remove the authentication server the user is authenticated against <br/>",
                "description": "When removing the authentication server a password must be set for the user to be able to login. A new password can be set by calling the PUT operation\n              /{username}/reset-password.<br/>\n              The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "username of the user whos authentication server should be removed",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                }
            }
        },
        "/users/{username}/customers": {
            "put": {
                "tags": [
                    "users"
                ],
                "operationId": "setCustomerRelations",
                "summary": "Sets the users customers.<br/>",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "username of the user the customers should be set for.",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "ids of the customers that should be set on this user.",
                        "name": "customerIds",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "post": {
                "tags": [
                    "users"
                ],
                "operationId": "addCustomerRelations",
                "summary": "Adds the customers to the user with the given username.<br/>",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user the customers should be added to",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "ids of the customers that should be added to the user",
                        "name": "customerIds",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/{username}/customers/{customer-id}": {
            "delete": {
                "tags": [
                    "users"
                ],
                "operationId": "deleteCustomerRelation",
                "summary": "Removes a customer from the user <br/>",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user that should have the customer removed.",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "description": "id of the customer that should be removed from the user.",
                        "name": "customer-id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/{username}/e-mail": {
            "put": {
                "tags": [
                    "users"
                ],
                "operationId": "updateEmail",
                "summary": "Updates the e-mail address of the user with the specified username",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user whos e-mail address should be updated",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "the new e-mail address for the user",
                        "name": "email",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/{username}/full-name": {
            "put": {
                "tags": [
                    "users"
                ],
                "operationId": "updateFullname",
                "summary": "Updates the full name of the user with the specified username",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the users whos full name should be updated",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "the new full name for the user with the specified username",
                        "name": "fullname",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/{username}/locale": {
            "put": {
                "tags": [
                    "users"
                ],
                "operationId": "setLocale",
                "summary": "Update the locale of the user <br/>",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              These are the valid locale parameters:\n              <table>\n              <thead>\n              <tr>\n              <td>locale</td>\n              <td>Description</td>\n              </tr>\n              </thead> <tbody>\n              <tr>\n              <td>en</td>\n              <td>English</td>\n              </tr>\n              <tr>\n              <td>de</td>\n              <td>German</td>\n              </tr>\n              <tr>\n              <td>es</td>\n              <td>Spanish</td>\n              </tr>\n              <tr>\n              <td>fr</td>\n              <td>French</td>\n              </tr>\n              <tr>\n              <td>it</td>\n              <td>Italian</td>\n              </tr>\n              <tr>\n              <td>ja</td>\n              <td>Japanese</td>\n              </tr>\n              <tr>\n              <td>ko</td>\n              <td>Korean</td>\n              </tr>\n              <tr>\n              <td>ru</td>\n              <td>Russian</td>\n              </tr>\n              <tr>\n              <td>pt_BR</td>\n              <td>Portuguese - Brazil</td>\n              </tr>\n              <tr>\n              <td>zh_CN</td>\n              <td>Simplified Chinese - China</td>\n              </tr>\n              <tr>\n              <td>zh_TW</td>\n              <td>Traditional Chinese - Taiwan</td>\n              </tr>\n              </tbody>\n              </table>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user that should have the locale updated",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "the locale that should be set on the user.",
                        "name": "locale",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "en",
                                "de",
                                "es",
                                "fr",
                                "it",
                                "ja",
                                "ko",
                                "ru",
                                "pt_BR",
                                "zh_CN",
                                "zh_TW"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/{username}/permissions": {
            "put": {
                "tags": [
                    "users"
                ],
                "operationId": "setPermissions",
                "summary": "Update the permissions for a user to the list of permissions",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              For a description of the different permissions see the POST operation /users/{username}/permissions<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user whos permissions should be updated",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "the permission that should be added and/or updated for the user",
                        "name": "permissions",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "post": {
                "tags": [
                    "users"
                ],
                "operationId": "addPermissions",
                "summary": "Add permissions to the user",
                "description": "There are four types of permissions. The allowed types are customer-permission, enabling-permission, module-permission and asset-permission. All types of\n              permissions uses the properties id and type.<br/>\n              <h5><b>customer-permission</b></h5> <br/>\n              The customer-permission furthermore uses the properties: dataAccess and accessType. The id should be the customers id this permission is for. The property\n              dataAccess is an array that can have the values:\n              <ul>\n              <li>MEASURED_POWER</li>\n              <li>ESTIMATED_LOAD_POWER</li>\n              <li>DEVICES</li>\n              </ul>\n              The accessType property can be:\n              <ul>\n              <li>EDIT</li>\n              <li>READ_ONLY</li>\n              <li>NO_ACCESS</li>\n              </ul>\n              <br/>\n              <h5><b>asset-permission</b></h5> <br/>\n              The property assetId of the asset-permission is the id of the asset this permission is for. The accessType property can be:\n              <ul>\n              <li>EDIT</li>\n              <li>READ_ONLY</li>\n              <li>NO_ACCESS</li>\n              </ul>\n              <br/>\n              <h5><b>enabling-permission</b></h5> <br/>\n              The enabling-permission does not use extra properties. Id for permission of type enabling-permission can have the following values:\n              <ul>\n              <li>USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR - enables access to configure users, user groups and their permissions and authentication servers</li>\n              <li>TAG_ADMINISTRATOR - enables \"Tools > Configure Tags\" in the desktop client and allows the user to configure tags. This is not required to be able to assign\n              tags.</li>\n              <li>GENOME_LIBRARY_AND_NETWORK_CABLE_TYPE_ADMINISTRATOR - enables \"Tools > Open Genome Library\" and \"Tools > Configure Network Cable Types\" in the desktop\n              client and allows user to configure the Genomes and network cable types</li>\n              <li>WORK_ORDER_ADMINISTRATOR - enables user to create and assign work orders</li>\n              <li>WORKFLOW_ADMINISTRATOR - enables user to create and assign workflows</li>\n              <li>SYSTEM_CONFIGURATION_ADMINISTRATOR -</li>\n              <li>CONFIGURATION_ADMINISTRATOR - enables \"System Setup\" menu item in the desktop client and allows user to setup system configurations, such as managing\n              licenses and integrating with external systems</li>\n              <li>CUSTOMER_USER_RIGHTS_ADMINISTRATOR - enables access to configure users with the same customers as the user with this permission.</li>\n              <li>REPORT_ACCESS - enables \"Analytics Reports\" in the desktop client and allows user to generate reports</li>\n              <li>PUE_SUMMARY_ACCESS - allows user to access to Power Usage Effectiveness Summary</li>\n              <li>LEGACY_WEBSERVICE_API_ACCESS - allows user to create a web service account and access data from the application exposed via the deprecated SOAP web\n              services, e.g. for designing custom reports. It only works with the web services defined here\n              https://sxwhelpcenter.ecostruxureit.com/display/DCIMDEVELOPER/StruxureWare+Data+Center+Operation+Web+Service+API</li>\n              <li>DISCOVERED_DEVICES_AND_ALARMS_ACCESS - provides access to the \"Device Association\", \"Discovered Devices\", \"Server Discoveries\" and \"Alarms\" views</li>\n              <li>PLANNING_DATA_CENTER_AND_ASSET_PROVISIONING - enables user to access the selected locations and rooms with the selected edit/view access in the\n              \"Planning Data Center\" and \"Planning Asset Provisioning\" perspective in the desktop client</li>\n              <li>DESKTOP_CLIENT - enables the user to log in to the desktop client</li>\n              <li>DEMO - changes your Operation installation to run in demo mode.</li>\n              </ul>\n              <br/>\n              <h5><b>module-permission</b></h5> <br/>\n              Module-permissions represents the licenses the user has access to. These permissions can no be assigned to or removed from the users directly.<br/>\n              <br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "username of the user that the permission should be added to",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "permissions that should be added to the user.",
                        "name": "permission",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/{username}/permissions/{permission-id}": {
            "put": {
                "tags": [
                    "users"
                ],
                "operationId": "updatePermission",
                "summary": "Updates the permission with the given id for the user with the given username. <br/>",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "username of the user that should have the permission updated.",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "description": "id of the permission that should be updated.",
                        "name": "permission-id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "what the permission should be updated to",
                        "name": "permission",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "operationId": "deletePermission",
                "summary": "Removes a permission from a user. <br/>",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "username of the user that should have the permission removed.",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "description": "id of the permission that should be removed from the user.",
                        "name": "permission-id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/{username}/preferences": {
            "put": {
                "tags": [
                    "users"
                ],
                "operationId": "setUserPreferences",
                "summary": "Sets the preferences to the user<br/>",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user the preferences should be updated for.",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "the preferences that should be added to the user.",
                        "name": "preferences",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserPreference"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "post": {
                "tags": [
                    "users"
                ],
                "operationId": "addUserPreferences",
                "summary": "Adds the preferences to the user with the given username <br/>",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "username of the user the preferences should be set for.",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "preference",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserPreference"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/{username}/preferences/{key}": {
            "put": {
                "tags": [
                    "users"
                ],
                "operationId": "updateUserPreference",
                "summary": "Updates the value of a preference with the given key for the user<br/>",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user the preferences should be updated for.",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "description": "the key of the preference that should be updated.",
                        "name": "key",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "the value the preference should be updated to.",
                        "name": "value",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "operationId": "deleteUserPreference",
                "summary": "Removes a preference from a user <br/>",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user that should have a preference removed",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "description": "the key of the preference that should be removed",
                        "name": "key",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/{username}/reset-password": {
            "put": {
                "tags": [
                    "users"
                ],
                "operationId": "resetPassword",
                "summary": "Resets the password and sends an email to the user with the specified username.<br/>",
                "description": "The password can not be reset for users that has the authenticationServerId set.<br/>\n              If the requesting user has neither the enabling-permission USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR or CUSTOMER_USER_RIGHTS_ADMINISTRATOR, the\n              password can not be reset. <br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the user whos password should be reset.",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "The json payload contains an email template for the message send to the user. @PWD@ in the template will be replaced with the password generated or\n        specified if specified, this is optional, a very simple email template is added in case its not defined.",
                        "name": "resetPassword",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResetPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/{username}/saved-queries": {
            "get": {
                "tags": [
                    "users"
                ],
                "operationId": "getUserSavedQueries",
                "summary": "Returns user saved queries. <br/>",
                "description": "Returns list of saved queries used for search in assets.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "- requestor and owner of requested queries",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserSavedQuery"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - when empty username"
                    },
                    "403": {
                        "description": "Forbidden - when requestor is not an owner of queries"
                    },
                    "404": {
                        "description": "Not existing - when requestor not exist"
                    }
                }
            },
            "post": {
                "tags": [
                    "users"
                ],
                "operationId": "addUserSavedQuery",
                "summary": "Creates user saved query. <br/>",
                "description": "Creates query for search in assets.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "- requestor and owner of requested query",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "- query to save",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserSavedQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request - when empty username or query"
                    },
                    "403": {
                        "description": "Forbidden - when requestor is not an owner of query"
                    },
                    "404": {
                        "description": "Not existing - when requestor not exist"
                    }
                }
            }
        },
        "/users/{username}/saved-queries/{queryId}": {
            "delete": {
                "tags": [
                    "users"
                ],
                "operationId": "removeUserSavedQuery",
                "summary": "Removes user saved query. <br/>",
                "description": "Removes query for search in assets.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "- requestor and owner of requested query",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "description": "- id of query to delete",
                        "name": "queryId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request - when empty username or query"
                    },
                    "403": {
                        "description": "Forbidden - when requestor is not an owner of query"
                    },
                    "404": {
                        "description": "Not existing - when requestor or query not exist"
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "operationId": "updateUserSavedQuery",
                "summary": "Removes user saved query. <br/>",
                "description": "Removes query for search in assets.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "- requestor and owner of requested query",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "description": "- id of query to update",
                        "name": "queryId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserSavedQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request - when empty username or query"
                    },
                    "403": {
                        "description": "Forbidden - when requestor is not an owner of query"
                    },
                    "404": {
                        "description": "Not existing - when requestor or query not exist"
                    }
                }
            }
        },
        "/users/{username}/username": {
            "put": {
                "tags": [
                    "users"
                ],
                "operationId": "updateUsername",
                "summary": "Updates the username of the user with the specified username <br/>",
                "description": "The rules described in the PUT operation /users/{username} also applies here<br/>\n              WARNING: This operation is NOT thread safe.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the username of the users whos username should be updated",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "the new username for the user",
                        "name": "newUsername",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/work-orders": {
            "get": {
                "tags": [
                    "work-orders"
                ],
                "operationId": "getWorkOrders",
                "summary": "Returns a list of open work orders",
                "description": "Returns a list of open work orders limited by the optional \"limit\" parameter. If the \"limit\" parameter is not provided it will default to 5000.\n              <br>\n              <strong style=\"color:red\">Experimental - </strong> The optional \"genomeId\" will limit the returned work orders, to only contain work orders,\n              which holds either an \"add\" or \"move\" task, where the new item's manufacturer, model name and part number corresponds, to the genome identified\n              with the genomeId. Note, the genomeId must correspond to a genome in the user genome library.\n              <br>\n              The returned\n              result can be enriched by providing \"includeOptions\". Supported options are:\n              <ul>\n              <li>tasks - include tasks for all work orders</li>\n              <li>associated_tickets - include associated tickets for all work order</li>\n              </ul>\n              Details regarding the exposed objects and their properties can be found <a href=\"services/WorkOrderVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "optional parameter to specify the result limit. Defaults to 5000",
                        "name": "limit",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "description": "enrich the work order with the include options. See implementation details for allowed values",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "tasks",
                                "associated_tickets",
                                "flow_nodes_as_tasks"
                            ]
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "in": "query",
                        "name": "Genome ID",
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WorkOrder"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient license"
                    }
                }
            }
        },
        "/work-orders/tasks/{task-id}": {
            "get": {
                "tags": [
                    "work-orders"
                ],
                "operationId": "getTask",
                "summary": "Returns the requested task",
                "description": "Get the task tied to the provided task ID. Details regarding the exposed objects and their properties can be found\n              <a href=\"services/WorkOrderTaskVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "ID of the task that is requested",
                        "name": "task-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "description": "enrich the returned task with the include options. See implementation details for allowed values",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "tasks",
                                "associated_tickets",
                                "flow_nodes_as_tasks"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient license"
                    }
                }
            }
        },
        "/work-orders/tasks/{task-id}/assign": {
            "put": {
                "tags": [
                    "work-orders"
                ],
                "operationId": "assign",
                "summary": "Assign the current logged in user to the task",
                "description": "If possible assign the current logged in user to the task with the provided ID. If the task already has a user assigned the task needs to be unassigned from\n              that user in order to be assigned to another user. If the task has a user group assigned the user needs to be a member of that user group to be able to assign\n              to it. If the task has no user group assigned the user needs to be a member of the user group assigned to the work order in order to be able to be assigned to\n              the task.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the ID of the task the current logged in user wants to be assigned to",
                        "name": "task-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "description": "enrich the returned task with the include options. See implementation details for allowed values",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "tasks",
                                "associated_tickets",
                                "flow_nodes_as_tasks"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient license"
                    }
                }
            }
        },
        "/work-orders/tasks/{task-id}/status": {
            "put": {
                "tags": [
                    "work-orders"
                ],
                "operationId": "updateTaskStatus",
                "summary": "Update status on the task with the given ID",
                "description": "Update the status of the task tied to the provided task ID.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "ID of the task that need status update",
                        "name": "task-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "description": "the new status of the task",
                        "name": "status",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "NOT_STARTED",
                                "IN_PROGRESS",
                                "COMPLETED",
                                "CANCELLED"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "description": "enrich the returned task with the include options. See implementation details for allowed values",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "tasks",
                                "associated_tickets",
                                "flow_nodes_as_tasks"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient license"
                    }
                }
            }
        },
        "/work-orders/tasks/{task-id}/unassign": {
            "put": {
                "tags": [
                    "work-orders"
                ],
                "operationId": "unassign",
                "summary": "Unassign the current logged in user from the task",
                "description": "If possible unassign the current logged in user from the task with the provided task ID. The task needs to have the current logged in user assigned to the task.\n              It also needs to have a user group assigned directly on the task or on the work order that the current logged in user is a member of.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "the ID of the task the current user wants to be unassigned from",
                        "name": "task-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "description": "enrich the returned task with the include options. See implementation details for allowed values",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "tasks",
                                "associated_tickets",
                                "flow_nodes_as_tasks"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient license"
                    }
                }
            }
        },
        "/work-orders/{work-order-id}": {
            "get": {
                "tags": [
                    "work-orders"
                ],
                "operationId": "getWorkOrder",
                "summary": "Returns the work order that matches the provided ID",
                "description": "Returns the work order that matches the provided ID. The returned result can be enriched by providing \"includeOptions\". Supported options are:\n              <ul>\n              <li>tasks - include tasks for the work order</li>\n              <li>associated_tickets - include associated tickets for all work order</li>\n              </ul>\n              Details regarding the exposed objects and their properties can be found <a href=\"services/WorkOrderVO.html\">here</a>.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "work-order-id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "query",
                        "description": "enrich the work order with the include options. See implementation details for allowed values",
                        "name": "include",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "tasks",
                                "associated_tickets",
                                "flow_nodes_as_tasks"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WorkOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient license"
                    }
                }
            }
        }
    },
    "definitions": {
        "EnvironmentalPowerConsumingEquipment": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "AssetIncludeOption": {
            "properties": {
                "AssetIncludeOption": {
                    "type": "string",
                    "enum": [
                        "children",
                        "custom_properties",
                        "custom_property_templates",
                        "device_links",
                        "navigation_path",
                        "drawing_shapes",
                        "visuals"
                    ]
                }
            }
        },
        "CustomerState": {
            "properties": {
                "isDefault": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "Customer": {
            "properties": {
                "customerType": {
                    "type": "string",
                    "enum": [
                        "EXTERNAL_CUSTOMER",
                        "INTERNAL_DEPARTMENT"
                    ]
                },
                "phoneNumber": {
                    "type": "string"
                },
                "contact": {
                    "type": "string"
                },
                "tenantPortalState": {
                    "type": "string",
                    "enum": [
                        "NOT_ACTIVATED",
                        "ACTIVATED",
                        "DEACTIVATED"
                    ]
                },
                "company": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "department": {
                    "type": "string"
                },
                "technicalContact": {
                    "$ref": "#/definitions/TechnicalContact"
                }
            }
        },
        "FireSuppression": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "InRoom": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/cooler"
                }
            ]
        },
        "CustomerRelation": {
            "properties": {
                "contractedPower": {
                    "type": "number",
                    "format": "double"
                },
                "comment": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/CustomerState"
                },
                "assignedTo": {
                    "type": "string"
                }
            }
        },
        "ModularEnclosure": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "productFamily": {
                            "type": "string"
                        },
                        "bayCounts": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "bayTypeConfiguration": {
                            "type": "string",
                            "enum": [
                                "FULL_HEIGHT_VERTICAL",
                                "HALF_HEIGHT_VERTICAL",
                                "HALF_AND_FULL_HEIGHT_VERTICAL",
                                "FULL_HEIGHT_HORIZONTAL",
                                "HALF_HEIGHT_HORIZONTAL",
                                "HALF_AND_FULL_HEIGHT_HORIZONTAL"
                            ]
                        },
                        "firstBayPositionNumber": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "InternalBreaker": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "bankNumber": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "maxCurrent": {
                            "type": "number",
                            "format": "double"
                        },
                        "deRating": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                },
                {
                    "$ref": "#/definitions/ElectricalComponent"
                }
            ]
        },
        "RackBatteryCabinet": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "JsonNode": {
            "properties": {
                "integralNumber": {
                    "type": "boolean"
                },
                "double": {
                    "type": "boolean"
                },
                "valueNode": {
                    "type": "boolean"
                },
                "floatingPointNumber": {
                    "type": "boolean"
                },
                "bigInteger": {
                    "type": "boolean"
                },
                "nodeType": {
                    "type": "string",
                    "enum": [
                        "ARRAY",
                        "BINARY",
                        "BOOLEAN",
                        "MISSING",
                        "NULL",
                        "NUMBER",
                        "OBJECT",
                        "POJO",
                        "STRING"
                    ]
                },
                "float": {
                    "type": "boolean"
                },
                "int": {
                    "type": "boolean"
                },
                "long": {
                    "type": "boolean"
                },
                "textual": {
                    "type": "boolean"
                },
                "empty": {
                    "type": "boolean"
                },
                "missingNode": {
                    "type": "boolean"
                },
                "pojo": {
                    "type": "boolean"
                },
                "number": {
                    "type": "boolean"
                },
                "boolean": {
                    "type": "boolean"
                },
                "null": {
                    "type": "boolean"
                },
                "array": {
                    "type": "boolean"
                },
                "binary": {
                    "type": "boolean"
                },
                "containerNode": {
                    "type": "boolean"
                },
                "short": {
                    "type": "boolean"
                },
                "bigDecimal": {
                    "type": "boolean"
                },
                "object": {
                    "type": "boolean"
                }
            }
        },
        "MetricsIncludeOption": {
            "properties": {
                "MetricsIncludeOption": {
                    "type": "string",
                    "enum": [
                        "children",
                        "total_u_space",
                        "used_u_space",
                        "available_u_space",
                        "contracted_power",
                        "customer_id",
                        "nameplate_load",
                        "estimated_load_per_top_level_item",
                        "measured_peak_load",
                        "measured_peak_load_30_days",
                        "total_weight",
                        "total_rack_power_limit",
                        "estimated_load",
                        "used_outlet_capacity",
                        "free_outlet_capacity",
                        "total_outlet_capacity"
                    ]
                }
            }
        },
        "AuxiliaryCabinet": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "PowerInlet": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "couplerType": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        },
                        "pinConfiguration": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                },
                {
                    "$ref": "#/definitions/ElectricalComponent"
                }
            ]
        },
        "Asset": {
            "required": [
                "type"
            ],
            "properties": {
                "accessType": {
                    "type": "string",
                    "enum": [
                        "EDIT",
                        "READ_ONLY",
                        "NO_ACCESS"
                    ]
                },
                "customProperties": {
                    "type": "object"
                },
                "customPropertyTemplates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Asset"
                    }
                },
                "navigationPath": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Path"
                    }
                },
                "subType": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string",
                    "format": "uuid"
                },
                "parentType": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AssetTag"
                    }
                }
            },
            "discriminator": "type"
        },
        "hacs": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "ductHeight": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "ductToCeiling": {
                            "type": "boolean"
                        },
                        "depth": {
                            "type": "number",
                            "format": "double"
                        },
                        "width": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/dataCenterItem"
                }
            ]
        },
        "block": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/fixture"
                }
            ]
        },
        "SwitchGear": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "PowerPanel": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "powerSystemType": {
                            "type": "string",
                            "enum": [
                                "SINGLE_PHASE",
                                "THREE_PHASE",
                                "DIRECT_CURRENT"
                            ],
                            "description": "the power system type (SINGLE_PHASE, THREE_PHASE, or DIRECT_CURRENT) of the power panel, if set"
                        },
                        "powerProvider": {
                            "$ref": "#/definitions/PowerProvider"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "TypeMetadata": {
            "properties": {
                "red": {
                    "type": "integer",
                    "format": "int32"
                },
                "symbol": {
                    "type": "string"
                },
                "green": {
                    "type": "integer",
                    "format": "int32"
                },
                "blue": {
                    "type": "integer",
                    "format": "int32"
                },
                "borderWidth": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "CableTraySection": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "color": {
                            "type": "string"
                        },
                        "shape": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PointVO"
                            }
                        },
                        "cableTrayMaterial": {
                            "type": "string",
                            "enum": [
                                "METAL",
                                "PLASTIC"
                            ]
                        },
                        "vertical": {
                            "type": "boolean"
                        },
                        "type": {
                            "type": "string"
                        },
                        "maxWeightPerMeter": {
                            "type": "number",
                            "format": "double"
                        },
                        "cableTrayType": {
                            "type": "string",
                            "enum": [
                                "LADDER",
                                "SOLID",
                                "PERFORATED"
                            ]
                        },
                        "maxCableCount": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "isVertical": {
                            "type": "boolean"
                        },
                        "width": {
                            "type": "number",
                            "format": "double"
                        },
                        "sideWallsHeight": {
                            "type": "number",
                            "format": "double"
                        },
                        "layers": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CableTrayLayer"
                            }
                        },
                        "height": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Asset"
                }
            ]
        },
        "epo": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "ServerRoom": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/room"
                }
            ]
        },
        "BatterySidecar": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "ProductType": {
            "properties": {
                "ProductType": {
                    "type": "string",
                    "enum": [
                        "AIR_COOLED_CHILLER",
                        "ATS",
                        "BATTERY",
                        "BLADE",
                        "BLADE_ENCLOSURE",
                        "BLOCK",
                        "BREAKER",
                        "BREAKER_MODULE",
                        "BUNDLE_FLOOR",
                        "CACS",
                        "CAMERA",
                        "CDU",
                        "CHILLER",
                        "CONDENSER",
                        "COOLINGTOWER",
                        "CRAC",
                        "CRACFAN",
                        "CRAH",
                        "DOOR",
                        "DRIVE_ARRAY",
                        "DRYCOOLER",
                        "ENVIRONMENTAL_EQUIPMENT",
                        "ENVIRONMENTAL_POWER_EQUIPMENT",
                        "EPO",
                        "FIRE_SUPPRESSION",
                        "GAP",
                        "GENERATOR",
                        "GENERIC_POWERED_FLOORMOUNTABLE",
                        "HACS",
                        "INROOM",
                        "ISX_MANAGER",
                        "LADDER",
                        "LAYER1_NETWORK_GEAR",
                        "LAYER2_NETWORK_GEAR",
                        "LAYER3_NETWORK_GEAR",
                        "NETBOTZ_CENTRAL",
                        "NETWORK",
                        "NETWORK_CABLE",
                        "NONEPOWERED_FLOORMOUNTABLE",
                        "NONEPOWERED_RACKMOUNTABLE",
                        "OVERHEAD_COOLING_UNIT",
                        "PAC",
                        "PDU",
                        "RECTIFIER",
                        "PERFORATED_CEILING_TILE",
                        "PERFORATED_TILE",
                        "PERFORATED_TILES_4X",
                        "PERFORATED_TILES_8X",
                        "PERSON",
                        "POWER_PANEL",
                        "POWER_RECEPTACLE",
                        "PUMP",
                        "RACK",
                        "RACS",
                        "RDP",
                        "ROW",
                        "SERVER",
                        "SHELF",
                        "SWITCHGEAR",
                        "SWITCH_ENCLOSURE",
                        "SWITCH_MODULE",
                        "TELECOM",
                        "UPS",
                        "VERTICAL_GRILLE",
                        "WATER_TANK",
                        "WALL",
                        "WINDOW"
                    ]
                }
            }
        },
        "dataCenterItem": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "cageId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "orientation": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "customerRelation": {
                            "$ref": "#/definitions/CustomerRelation"
                        },
                        "shape": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PointVO"
                            }
                        },
                        "type": {
                            "type": "string"
                        },
                        "depth": {
                            "type": "number",
                            "format": "double"
                        },
                        "stage": {
                            "type": "string",
                            "enum": [
                                "EXISTING",
                                "PENDING_ADD",
                                "PENDING_MOVE",
                                "PENDING_DELETE",
                                "PENDING_PLANNED"
                            ]
                        },
                        "installDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "positionTopLeftY": {
                            "type": "number",
                            "format": "double"
                        },
                        "positionTopLeftX": {
                            "type": "number",
                            "format": "double"
                        },
                        "name": {
                            "type": "string"
                        },
                        "width": {
                            "type": "number",
                            "format": "double"
                        },
                        "nameLocked": {
                            "type": "boolean"
                        },
                        "clearance": {
                            "$ref": "#/definitions/ClearanceVO"
                        },
                        "deviceLinks": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeviceLinkVO"
                            }
                        },
                        "customer": {
                            "$ref": "#/definitions/Customer"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Asset"
                }
            ]
        },
        "CracFan": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "WaterTank": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/fixture"
                }
            ]
        },
        "AssetTag": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "category": {
                    "type": "string"
                },
                "strict": {
                    "type": "boolean"
                },
                "categoryDescription": {
                    "type": "string"
                }
            }
        },
        "Coordinate": {
            "properties": {
                "x": {
                    "type": "integer",
                    "format": "int32"
                },
                "coordinateType": {
                    "type": "string",
                    "enum": [
                        "RATIO",
                        "POINT"
                    ]
                },
                "y": {
                    "type": "integer",
                    "format": "int32"
                },
                "z": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "cdu": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "RackMountPdu": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "powerOutlets": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PowerOutlet"
                            }
                        },
                        "internalBreakers": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InternalBreaker"
                            }
                        },
                        "designPowerLimit": {
                            "type": "number",
                            "format": "double"
                        },
                        "chassisElements": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ChassisElement"
                            }
                        },
                        "powerInlets": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PowerInlet"
                            }
                        },
                        "outlets": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "hasPowerOutlets": {
                            "type": "boolean"
                        },
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "GenericRackMountedDataCenterEquipment": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "DrawingShape": {
            "properties": {
                "svgShapeName": {
                    "type": "string"
                },
                "svgShape": {
                    "type": "string"
                },
                "rotation": {
                    "type": "integer",
                    "format": "int32"
                },
                "x": {
                    "type": "integer",
                    "format": "int32"
                },
                "y": {
                    "type": "integer",
                    "format": "int32"
                },
                "colorHex": {
                    "type": "string"
                }
            }
        },
        "SupportingInfrastructureSpace": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/room"
                }
            ]
        },
        "AssetJsonPatchOperation": {
            "required": [
                "op"
            ],
            "properties": {
                "path": {
                    "type": "string"
                },
                "op": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "format": "uuid"
                },
                "value": {
                    "type": "string"
                }
            },
            "discriminator": "op"
        },
        "server": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "PatchPanel": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "PowerConsumer": {
            "properties": {
                "inlets": {
                    "type": "integer",
                    "format": "int32"
                },
                "estimatedLoad": {
                    "type": "number",
                    "format": "double"
                },
                "powerRedundancy": {
                    "type": "string",
                    "enum": [
                        "N",
                        "RACK_PDU",
                        "N_PLUS_ONE",
                        "RACK_PDU_PLUS_ONE",
                        "TWO_N",
                        "TWO_N_PLUS_ONE"
                    ]
                },
                "autoUpdatePowerDraw": {
                    "type": "boolean"
                },
                "nameplate": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "ByPass": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "AddOperation": {
            "allOf": [
                {
                    "required": [
                        "op"
                    ],
                    "properties": {
                        "op": {
                            "type": "string"
                        },
                        "addOperation": {
                            "type": "boolean"
                        },
                        "removeOperation": {
                            "type": "boolean"
                        },
                        "addOrReplaceOpeartion": {
                            "type": "boolean"
                        },
                        "jsonNode": {
                            "$ref": "#/definitions/JsonNode"
                        },
                        "value": {
                            "type": "string"
                        },
                        "operationDetails": {
                            "$ref": "#/definitions/AssetPatchOperationDetails"
                        },
                        "replaceOperation": {
                            "type": "boolean"
                        }
                    },
                    "discriminator": "op"
                },
                {
                    "$ref": "#/definitions/AssetJsonPatchOperation"
                }
            ]
        },
        "AssetDeviceList": {
            "properties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeviceVO"
                    }
                },
                "assetId": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "PowerProvider": {
            "properties": {
                "outputVoltage": {
                    "$ref": "#/definitions/Voltage",
                    "description": "the output voltage of the power provider."
                },
                "inputVoltage": {
                    "$ref": "#/definitions/Voltage",
                    "description": "the input voltage of the power provider."
                }
            }
        },
        "EnvironmentalEquipment": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "AssetSearchResult": {
            "properties": {
                "serialNumber": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "customPropertyKeys": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string",
                    "format": "uuid"
                },
                "parentType": {
                    "type": "string"
                },
                "roomId": {
                    "type": "string",
                    "format": "uuid"
                },
                "roomName": {
                    "type": "string"
                },
                "luceneSearchScore": {
                    "type": "number",
                    "format": "float"
                },
                "cageName": {
                    "type": "string"
                },
                "manufacturer": {
                    "type": "string"
                },
                "modelName": {
                    "type": "string"
                },
                "parentName": {
                    "type": "string"
                },
                "rackName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "subType": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "partNumber": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "barcode": {
                    "type": "string"
                },
                "customPropertyValues": {
                    "type": "string"
                },
                "roomType": {
                    "type": "string"
                }
            }
        },
        "DeviceVO": {
            "required": [
                "type"
            ],
            "properties": {
                "deviceRootId": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "systemType": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "deviceId": {
                    "$ref": "#/definitions/DeviceId"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DevicePropertyValuePairVO"
                    }
                }
            },
            "discriminator": "type"
        },
        "FeedFrame": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "condenser": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "PerforatedFloorTile": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "perforatedRatio": {
                            "type": "number",
                            "format": "double"
                        },
                        "depth": {
                            "type": "number",
                            "format": "double"
                        },
                        "width": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": {
                            "type": "string"
                        },
                        "height": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/dataCenterItem"
                }
            ]
        },
        "pump": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "packageMethod": {
                            "type": "string",
                            "enum": [
                                "ChilledWater",
                                "Heatrejection"
                            ]
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "Path": {
            "properties": {
                "hasAccess": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "cacs": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "depth": {
                            "type": "number",
                            "format": "double"
                        },
                        "width": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/dataCenterItem"
                }
            ]
        },
        "IsxManager": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "PowerCapacityPerPhaseIncludeOption": {
            "properties": {
                "PowerCapacityPerPhaseIncludeOption": {
                    "type": "string",
                    "enum": [
                        "MEASURED_DATA",
                        "CALCULATED_DATA"
                    ]
                }
            }
        },
        "MountType": {
            "properties": {
                "MountType": {
                    "type": "string",
                    "enum": [
                        "FLOOR_MOUNTABLE",
                        "RACK_MOUNTABLE",
                        "BLADE_ENCLOSURE_MOUNTABLE",
                        "SWITCH_ENCLOSURE_MOUNTABLE",
                        "SHELF_MOUNTABLE"
                    ]
                }
            }
        },
        "PowerConsumingFloorMountedEquipmentVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "OverheadCoolingUnit": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/cooler"
                }
            ]
        },
        "FloorPlan": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/location"
                }
            ]
        },
        "RejectedPatchOperation": {
            "properties": {
                "assetPatchOperationVO": {
                    "$ref": "#/definitions/AssetJsonPatchOperation"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "JsonPatchOperation": {
            "properties": {
                "op": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "TileGridVO": {
            "properties": {
                "depth": {
                    "type": "number",
                    "format": "double"
                },
                "columnNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "width": {
                    "type": "number",
                    "format": "double"
                },
                "position": {
                    "$ref": "#/definitions/PointVO"
                },
                "rowNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "rectifier": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "maxCurrent": {
                            "type": "number",
                            "format": "double"
                        },
                        "totalCapacity": {
                            "type": "number",
                            "format": "double"
                        },
                        "outputVoltage": {
                            "$ref": "#/definitions/Voltage"
                        },
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "powerFeed": {
                            "type": "string"
                        },
                        "internalRedundancy": {
                            "type": "string",
                            "description": "the internal redundancy of the rectifier if set (\"N\" or \"N_PLUS_ONE\")."
                        },
                        "powerSystemType": {
                            "type": "string",
                            "enum": [
                                "SINGLE_PHASE",
                                "THREE_PHASE",
                                "DIRECT_CURRENT"
                            ],
                            "description": "the power system type of the rectifier, i.e. DIRECT_CURRENT"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "RackMounted": {
            "properties": {
                "availableMountingPositions": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "TOP_MOUNTED",
                            "NOT_MOUNTED",
                            "RIGHT_REAR_MOUNTED",
                            "LEFT_REAR_MOUNTED",
                            "REAR_MOUNTED",
                            "FRONT_MOUNTED",
                            "LEFT_FRONT_MOUNTED",
                            "RIGHT_FRONT_MOUNTED",
                            "BOTTOM_MOUNTED"
                        ]
                    },
                    "description": "returns list of available mounting positions for this item"
                },
                "shelfMountedPossible": {
                    "type": "boolean",
                    "description": "True, if the equipment can be placed on a shelf"
                },
                "visuals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AssetVisual"
                    },
                    "description": "a list of the visuals attached to this piece of equipment."
                },
                "unitPosition": {
                    "type": "integer",
                    "format": "int32",
                    "description": "the u-position of this equipment, starting at 1 in the bottom of the rack"
                },
                "shelfMounted": {
                    "type": "boolean",
                    "description": "True, if the equipment is placed on a shelf"
                },
                "rackMountingPosition": {
                    "type": "string",
                    "enum": [
                        "TOP_MOUNTED",
                        "NOT_MOUNTED",
                        "RIGHT_REAR_MOUNTED",
                        "LEFT_REAR_MOUNTED",
                        "REAR_MOUNTED",
                        "FRONT_MOUNTED",
                        "LEFT_FRONT_MOUNTED",
                        "RIGHT_FRONT_MOUNTED",
                        "BOTTOM_MOUNTED"
                    ],
                    "description": "Get the mounting position of the equipment. See the constants in this class."
                },
                "unitHeight": {
                    "type": "integer",
                    "format": "int32",
                    "description": "the number of u-positions taken by this equipment"
                }
            }
        },
        "ElectricalRoom": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/room"
                }
            ]
        },
        "BottomFeedFrame": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "PointVO": {
            "properties": {
                "x": {
                    "type": "number",
                    "format": "double"
                },
                "y": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "RackMountUps": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/abstractUps"
                }
            ]
        },
        "door": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "doorSecurityType": {
                            "type": "string",
                            "enum": [
                                "BIOMETRIC_SECURITY",
                                "CARD_SECURITY",
                                "NONE_SECURITY",
                                "KEY_SECURITY"
                            ]
                        },
                        "doorDirection": {
                            "type": "string",
                            "enum": [
                                "LEFT",
                                "RIGHT"
                            ]
                        },
                        "doorType": {
                            "type": "string",
                            "enum": [
                                "SLIDE_DOUBLE",
                                "SLIDE_SINGLE",
                                "SWING_DOUBLE",
                                "SWING_SINGLE"
                            ]
                        },
                        "type": {
                            "type": "string"
                        },
                        "doorAutoLock": {
                            "type": "boolean"
                        },
                        "height": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/dataCenterItem"
                }
            ]
        },
        "AssetVisual": {
            "properties": {
                "assetVisualResourceId": {
                    "type": "string",
                    "format": "uuid"
                },
                "placement": {
                    "type": "string",
                    "enum": [
                        "FRONT",
                        "REAR"
                    ]
                }
            }
        },
        "VerticalExtrusion": {
            "required": [
                "type"
            ],
            "properties": {
                "slotsPerRow": {
                    "type": "integer",
                    "format": "int32"
                },
                "mounting": {
                    "type": "string",
                    "enum": [
                        "LEFT",
                        "RIGHT"
                    ]
                },
                "rows": {
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "type": "string"
                }
            },
            "discriminator": "type"
        },
        "DataCenterEquipment": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "modelName": {
                            "type": "string"
                        },
                        "serialNumberLocked": {
                            "type": "boolean"
                        },
                        "barcodeLocked": {
                            "type": "boolean"
                        },
                        "serialNumber": {
                            "type": "string"
                        },
                        "partNumberId": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "weight": {
                            "type": "number",
                            "format": "double"
                        },
                        "description": {
                            "type": "string"
                        },
                        "partNumber": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        },
                        "barcode": {
                            "type": "string"
                        },
                        "manufacturer": {
                            "type": "string"
                        },
                        "height": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/dataCenterItem"
                }
            ]
        },
        "CoolingTower": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "blade": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/ModularComponent"
                }
            ]
        },
        "cage": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "walls": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Wall"
                            }
                        },
                        "tileGrid": {
                            "$ref": "#/definitions/TileGridVO"
                        },
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "CableTray": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "cableTraySections": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CableTraySection"
                            }
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "UserGroupIncludeOption": {
            "properties": {
                "UserGroupIncludeOption": {
                    "type": "string",
                    "enum": [
                        "permissions",
                        "users"
                    ]
                }
            }
        },
        "BatteryCabinet": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "RemoteDistributionPanel": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "powerSystemType": {
                            "type": "string",
                            "enum": [
                                "SINGLE_PHASE",
                                "THREE_PHASE",
                                "DIRECT_CURRENT"
                            ],
                            "description": "the power system type (SINGLE_PHASE, THREE_PHASE, or DIRECT_CURRENT) of the remote distribution panel, if set"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "NetbotzCentral": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "ElectricalComponent": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        },
                        "drawingShape": {
                            "$ref": "#/definitions/DrawingShape"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Asset"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "group": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "color": {
                            "type": "string"
                        },
                        "shape": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PointVO"
                            }
                        },
                        "name": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Asset"
                },
                {
                    "$ref": "#/definitions/dataCenterItem"
                }
            ]
        },
        "PowerOutlet": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "bankNumber": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "phase": {
                            "type": "string",
                            "enum": [
                                "L1",
                                "L2",
                                "L3",
                                "NONE",
                                "L1_L2",
                                "L1_L2_L3",
                                "L1_L3",
                                "L2_L3"
                            ]
                        },
                        "couplerType": {
                            "type": "string"
                        },
                        "parentRackUUID": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "connectedDeviceUuid": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": {
                            "type": "string"
                        },
                        "occupied": {
                            "type": "boolean"
                        },
                        "outletIndex": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "voltage": {
                            "$ref": "#/definitions/Voltage"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                },
                {
                    "$ref": "#/definitions/ElectricalComponent"
                }
            ]
        },
        "ats": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "powerSystemType": {
                            "type": "string",
                            "enum": [
                                "SINGLE_PHASE",
                                "THREE_PHASE",
                                "DIRECT_CURRENT"
                            ],
                            "description": "the power system type (SINGLE_PHASE, THREE_PHASE, or DIRECT_CURRENT) of the ATS, if set"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "DeviceLinkVO": {
            "properties": {
                "coordinate": {
                    "$ref": "#/definitions/Coordinate"
                },
                "deviceId": {
                    "$ref": "#/definitions/DeviceId"
                }
            }
        },
        "CustomPropertyData": {
            "properties": {
                "violatesUniqueConstraint": {
                    "type": "boolean",
                    "description": "whether value of custom property violates unique constraint"
                },
                "type": {
                    "type": "string",
                    "description": "type of custom property"
                },
                "value": {
                    "type": "string",
                    "description": "value of custom property"
                }
            }
        },
        "DevicePropertyValueVO": {
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "discriminator": "type"
        },
        "RemoveOperation": {
            "allOf": [
                {
                    "required": [
                        "op"
                    ],
                    "properties": {
                        "op": {
                            "type": "string"
                        },
                        "addOperation": {
                            "type": "boolean"
                        },
                        "removeOperation": {
                            "type": "boolean"
                        },
                        "addOrReplaceOpeartion": {
                            "type": "boolean"
                        },
                        "operationDetails": {
                            "$ref": "#/definitions/AssetPatchOperationDetails"
                        },
                        "replaceOperation": {
                            "type": "boolean"
                        }
                    },
                    "discriminator": "op"
                },
                {
                    "$ref": "#/definitions/AssetJsonPatchOperation"
                }
            ]
        },
        "chiller": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "DevicePropertyValuePairVO": {
            "properties": {
                "devicePropertyValue": {
                    "$ref": "#/definitions/DevicePropertyValueVO"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "AirDistributionUnit": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "PowerModuleCabinet": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "VerticalExtrusionMounting": {
            "properties": {
                "VerticalExtrusionMounting": {
                    "type": "string",
                    "enum": [
                        "RIGHT",
                        "LEFT"
                    ]
                }
            }
        },
        "shelf": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "fixture": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "height": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/dataCenterItem"
                }
            ]
        },
        "ChassisElement": {
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "type": "string"
                },
                "drawingShape": {
                    "$ref": "#/definitions/DrawingShape"
                }
            },
            "discriminator": "type"
        },
        "TransformerCabinet": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "UserIncludeOption": {
            "properties": {
                "UserIncludeOption": {
                    "type": "string",
                    "enum": [
                        "permissions",
                        "user_groups",
                        "customers",
                        "preferences"
                    ]
                }
            }
        },
        "SwitchModule": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/ModularComponent"
                }
            ]
        },
        "BladeEnclosure": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/ModularEnclosure"
                }
            ]
        },
        "RackShadow": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "PerforatedCeilingTile": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "perforatedRatio": {
                            "type": "number",
                            "format": "double"
                        },
                        "depth": {
                            "type": "number",
                            "format": "double"
                        },
                        "width": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": {
                            "type": "string"
                        },
                        "height": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/dataCenterItem"
                }
            ]
        },
        "AssetPatchOperationDetails": {
            "properties": {
                "propertyName": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "format": "uuid"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "EnablingPermission": {
            "allOf": [
                {
                    "properties": {
                        "id": {
                            "type": "string",
                            "enum": [
                                "USER_RIGHTS_AND_AUTHENTICATION_SERVERS_ADMINISTRATOR",
                                "TAG_ADMINISTRATOR",
                                "GENOME_LIBRARY_AND_NETWORK_CABLE_TYPE_ADMINISTRATOR",
                                "WORK_ORDER_ADMINISTRATOR",
                                "WORKFLOW_ADMINISTRATOR",
                                "SYSTEM_CONFIGURATION_ADMINISTRATOR",
                                "CUSTOMER_USER_RIGHTS_ADMINISTRATOR",
                                "REPORT_ACCESS",
                                "PUE_SUMMARY_ACCESS",
                                "LEGACY_WEBSERVICE_API_ACCESS",
                                "DISCOVERED_DEVICES_AND_ALARMS_ACCESS",
                                "LAUNCH_TO_COOLING_OPTIMIZE_ACCESS",
                                "PLANNING_DATA_CENTER_AND_ASSET_PROVISIONING",
                                "DESKTOP_CLIENT",
                                "DEMO",
                                "PERMIT_ACCESS_FROM_EXTERNAL_NETWORK"
                            ]
                        },
                        "type": {
                            "type": "string"
                        }
                    }
                },
                {
                    "$ref": "#/definitions/Permission"
                }
            ]
        },
        "Sensor": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "threePhaseVoltage": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "phaseNeutralToPhasePhaseFactor": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Voltage"
                }
            ]
        },
        "FloorUps": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/abstractUps"
                }
            ]
        },
        "Wall": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "wallMaterial": {
                            "type": "string",
                            "enum": [
                                "GLASS",
                                "MESH",
                                "SOLID"
                            ]
                        },
                        "shape": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PointVO"
                            }
                        },
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "width": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": {
                            "type": "string"
                        },
                        "height": {
                            "type": "number",
                            "format": "double"
                        },
                        "reachesRoomCeiling": {
                            "type": "boolean"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Asset"
                }
            ]
        },
        "ClearanceVO": {
            "properties": {
                "frontClearance": {
                    "type": "integer",
                    "format": "int32"
                },
                "rightClearance": {
                    "type": "integer",
                    "format": "int32"
                },
                "backClearance": {
                    "type": "integer",
                    "format": "int32"
                },
                "leftClearance": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "DeviceId": {
            "properties": {
                "systemId": {
                    "type": "string",
                    "format": "uuid"
                },
                "deviceId": {
                    "type": "string"
                }
            }
        },
        "generator": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "FloorMounted": {
            "properties": {
                "rotation": {
                    "type": "integer",
                    "format": "int32"
                },
                "x": {
                    "type": "integer",
                    "format": "int32"
                },
                "y": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "DryCooler": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "storage": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/room"
                }
            ]
        },
        "FloorShadow": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/dataCenterItem"
                }
            ]
        },
        "network": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "RackAccessControl": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "ModulePermission": {
            "allOf": [
                {
                    "properties": {
                        "id": {
                            "type": "string",
                            "enum": [
                                "EnergyEfficiency",
                                "Capacity",
                                "Change",
                                "ITOptimize",
                                "Operation"
                            ]
                        },
                        "type": {
                            "type": "string"
                        }
                    }
                },
                {
                    "$ref": "#/definitions/Permission"
                }
            ]
        },
        "unsupported": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "description": {
                            "type": "string",
                            "description": "a description of what kind of equipment is not supported"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "ReplaceOperation": {
            "allOf": [
                {
                    "required": [
                        "op"
                    ],
                    "properties": {
                        "op": {
                            "type": "string"
                        },
                        "addOperation": {
                            "type": "boolean"
                        },
                        "removeOperation": {
                            "type": "boolean"
                        },
                        "addOrReplaceOpeartion": {
                            "type": "boolean"
                        },
                        "jsonNode": {
                            "$ref": "#/definitions/JsonNode"
                        },
                        "value": {
                            "type": "string"
                        },
                        "operationDetails": {
                            "$ref": "#/definitions/AssetPatchOperationDetails"
                        },
                        "replaceOperation": {
                            "type": "boolean"
                        }
                    },
                    "discriminator": "op"
                },
                {
                    "$ref": "#/definitions/AssetJsonPatchOperation"
                }
            ]
        },
        "RackMountAts": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "internalRackPdu": {
                            "$ref": "#/definitions/RackMountPdu"
                        },
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "Voltage": {
            "required": [
                "type"
            ],
            "properties": {
                "currentType": {
                    "type": "string",
                    "enum": [
                        "VOLTAGE_AC",
                        "VOLTAGE_DC",
                        "VOLTAGE_UNKNOWN"
                    ]
                },
                "type": {
                    "type": "string"
                },
                "voltage": {
                    "type": "integer",
                    "format": "int32"
                },
                "frequency": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "discriminator": "type"
        },
        "gap": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/fixture"
                }
            ]
        },
        "fanwall": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/cooler"
                }
            ]
        },
        "row": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "depth": {
                            "type": "number",
                            "format": "double"
                        },
                        "width": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/dataCenterItem"
                }
            ]
        },
        "ExternalMounting": {
            "required": [
                "type"
            ],
            "properties": {
                "distance": {
                    "type": "number",
                    "format": "double"
                },
                "mounting": {
                    "type": "string",
                    "enum": [
                        "TOP",
                        "BOTTOM"
                    ]
                },
                "uPositions": {
                    "type": "integer",
                    "format": "int32"
                },
                "overheadMounting": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "discriminator": "type"
        },
        "AssetMetrics": {
            "properties": {
                "assetId": {
                    "type": "string",
                    "format": "uuid"
                },
                "metrics": {
                    "type": "object"
                }
            }
        },
        "RackGroupVO": {
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "singlePhaseVoltage": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Voltage"
                }
            ]
        },
        "Pdu": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "powerSystemType": {
                            "type": "string",
                            "enum": [
                                "SINGLE_PHASE",
                                "THREE_PHASE",
                                "DIRECT_CURRENT"
                            ],
                            "description": "the power system type (SINGLE_PHASE, THREE_PHASE, or DIRECT_CURRENT) of the PDU, if set"
                        },
                        "powerProvider": {
                            "$ref": "#/definitions/PowerProvider"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "rack": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "ductToCeiling": {
                            "type": "boolean"
                        },
                        "designPowerLimit": {
                            "type": "number",
                            "format": "double",
                            "description": "breaker design limit in Watt or null if not defined."
                        },
                        "topExternalMounting": {
                            "$ref": "#/definitions/ExternalMounting"
                        },
                        "positionsCountedFromZeroIndex": {
                            "type": "boolean"
                        },
                        "groups": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RackGroupVO"
                            }
                        },
                        "maxWeight": {
                            "type": "number",
                            "format": "double",
                            "description": "the max weight in grams"
                        },
                        "type": {
                            "type": "string"
                        },
                        "ductHeight": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "leftMountedVerticalExtrusion": {
                            "$ref": "#/definitions/VerticalExtrusion"
                        },
                        "positionsOrderFromBottomToTop": {
                            "type": "boolean"
                        },
                        "bottomExternalMounting": {
                            "$ref": "#/definitions/ExternalMounting"
                        },
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "availableUHeight": {
                            "type": "integer",
                            "format": "int32",
                            "description": "the total u-height if the rack was empty"
                        },
                        "rightMountedVerticalExtrusion": {
                            "$ref": "#/definitions/VerticalExtrusion"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "VerticalGrille": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "width": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": {
                            "type": "string"
                        },
                        "height": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/dataCenterItem"
                }
            ]
        },
        "ModularComponent": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "moduleType": {
                            "type": "string",
                            "enum": [
                                "SINGLE",
                                "DOUBLE"
                            ]
                        },
                        "absoluteBayPosition": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "bayPosition": {
                            "type": "string",
                            "enum": [
                                "UPPER_SLOT",
                                "LOWER_SLOT"
                            ]
                        },
                        "moduleWidth": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "productFamilyList": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "type": {
                            "type": "string"
                        },
                        "bayType": {
                            "type": "string",
                            "enum": [
                                "HALF",
                                "FULL"
                            ]
                        },
                        "bayPositionNumber": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "SwitchEnclosure": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/ModularEnclosure"
                }
            ]
        },
        "AssetCreation": {
            "properties": {
                "genomeId": {
                    "type": "string",
                    "format": "uuid"
                },
                "rackMountPosition": {
                    "type": "string",
                    "enum": [
                        "TOP_MOUNTED",
                        "NOT_MOUNTED",
                        "RIGHT_REAR_MOUNTED",
                        "LEFT_REAR_MOUNTED",
                        "REAR_MOUNTED",
                        "FRONT_MOUNTED",
                        "LEFT_FRONT_MOUNTED",
                        "RIGHT_FRONT_MOUNTED",
                        "BOTTOM_MOUNTED"
                    ]
                },
                "xCoordinate": {
                    "type": "integer",
                    "format": "int32"
                },
                "orientation": {
                    "type": "integer",
                    "format": "int32"
                },
                "yCoordinate": {
                    "type": "integer",
                    "format": "int32"
                },
                "bayPosition": {
                    "type": "string",
                    "enum": [
                        "UPPER_SLOT",
                        "LOWER_SLOT"
                    ]
                },
                "uPosition": {
                    "type": "integer",
                    "format": "int32"
                },
                "bayPositionNumber": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "CableTrayLayer": {
            "required": [
                "type"
            ],
            "properties": {
                "color": {
                    "type": "string"
                },
                "locationId": {
                    "type": "string",
                    "format": "uuid"
                },
                "description": {
                    "type": "string"
                },
                "heightReferencePoint": {
                    "type": "string",
                    "enum": [
                        "CEILING",
                        "FLOOR"
                    ]
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "label": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "roomId": {
                    "type": "string",
                    "format": "uuid"
                },
                "height": {
                    "type": "number",
                    "format": "double"
                }
            },
            "discriminator": "type"
        },
        "room": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "area": {
                            "type": "number",
                            "format": "double"
                        },
                        "tileGrid": {
                            "$ref": "#/definitions/TileGridVO"
                        },
                        "type": {
                            "type": "string"
                        },
                        "wallHeight": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/dataCenterItem"
                }
            ]
        },
        "AirRemovalUnit": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "TechnicalContact": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "RackMonitor": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "rackMounted": {
                            "$ref": "#/definitions/RackMounted"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "GenericFloorMountedDataCenterEquipment": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "abstractUps": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "totalCapacity": {
                            "type": "number",
                            "format": "double"
                        },
                        "powerFeed": {
                            "type": "string"
                        },
                        "internalRedundancy": {
                            "type": "string",
                            "description": "the internal redundancy of the UPS if set (\"N\" or \"N_PLUS_ONE\")."
                        },
                        "powerSystemType": {
                            "type": "string",
                            "enum": [
                                "SINGLE_PHASE",
                                "THREE_PHASE",
                                "DIRECT_CURRENT"
                            ],
                            "description": "the power system type (SINGLE_PHASE, THREE_PHASE, or DIRECT_CURRENT) of the UPS, if set"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "cooler": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "supplyTemperature": {
                            "type": "number",
                            "format": "double"
                        },
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "airflow": {
                            "type": "number",
                            "format": "double"
                        },
                        "coolingCapacity": {
                            "type": "number",
                            "format": "double",
                            "description": "the cooling capacity in watts"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "crah": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "powerConsumer": {
                            "$ref": "#/definitions/PowerConsumer"
                        },
                        "floorMounted": {
                            "$ref": "#/definitions/FloorMounted"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DataCenterEquipment"
                }
            ]
        },
        "location": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Asset"
                }
            ]
        },
        "window": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "height": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/dataCenterItem"
                }
            ]
        },
        "AuditTrailEntry": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "ASSET_ADD",
                        "ASSET_CHANGE",
                        "ASSET_MOVE",
                        "ASSET_REMOVE",
                        "ASSETS",
                        "ALARM_RAISED",
                        "ALARM_REMOVED",
                        "ALARMS",
                        "GENOME_ADDED",
                        "GENOME_REMOVED",
                        "GENOME_UPDATED",
                        "GENOMES",
                        "SYSTEM_CAPACITY_HISTORY",
                        "SYSTEM_CUSTOM_PROPERTIES",
                        "SYSTEM_EXTERNAL_SYSTEMS",
                        "SYSTEM_MAIL_SETTINGS",
                        "SYSTEM_TAGS",
                        "SYSTEM_USER_INFORMATION_CHANGED",
                        "SYSTEM_USER_LOGINS",
                        "SYSTEM_WORK_ORDERS",
                        "SYSTEM",
                        "REPORT_CHANGED",
                        "CHANGE_MANAGEMENT_WORK_ORDER",
                        "CHANGE_MANAGEMENT_WORK_ORDER_TASK",
                        "CHANGE_MANAGEMENT_CHANGE_REQUEST",
                        "CHANGE_MANAGEMENT_CHANGE_REQUEST_TEMPLATE",
                        "CHANGE_MANAGEMENT",
                        "NETWORK_CABLE_TYPES",
                        "USER_MESSAGE",
                        "COLORED_LABELS",
                        "CUSTOMER_STATES",
                        "ALL"
                    ]
                },
                "relatedAssetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "logTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "UserPasswordChange": {
            "properties": {
                "newPassword": {
                    "type": "string"
                },
                "currentPassword": {
                    "type": "string"
                }
            }
        },
        "UserCredentials": {
            "properties": {
                "password": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "Token": {
            "properties": {
                "url": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "LDAPAuthenticationServer": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "searchBase": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        },
                        "userDN": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/AuthenticationServer"
                }
            ]
        },
        "SAMLAuthenticationServer": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "groupsAttributeName": {
                            "type": "string"
                        },
                        "userEmailAttributeName": {
                            "type": "string"
                        },
                        "requestCertificate": {
                            "type": "string"
                        },
                        "serviceProviderId": {
                            "type": "string"
                        },
                        "groupsMapping": {
                            "type": "string"
                        },
                        "assertionConsumerServiceUrl": {
                            "type": "string"
                        },
                        "defaultGroup": {
                            "type": "string"
                        },
                        "usernameAttributeName": {
                            "type": "string"
                        },
                        "requestCertificateIssuer": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        },
                        "federationPath": {
                            "type": "string"
                        },
                        "userFullNameAttributeName": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/AuthenticationServer"
                }
            ]
        },
        "ActiveDirectoryAuthenticationServer": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "domain": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        },
                        "username": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/AuthenticationServer"
                }
            ]
        },
        "AuthenticationServer": {
            "required": [
                "type"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "type": "string"
                },
                "secureConnection": {
                    "type": "boolean"
                }
            },
            "discriminator": "type"
        },
        "DCExpertAuthenticationServer": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "username": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/AuthenticationServer"
                }
            ]
        },
        "GroupAuthenticationServerVO": {
            "allOf": [
                {
                    "properties": {
                        "membershipGroupAttribute": {
                            "type": "string"
                        },
                        "groupNameAttribute": {
                            "type": "string"
                        },
                        "membershipUserAttribute": {
                            "type": "string"
                        },
                        "userNameAttribute": {
                            "type": "string"
                        },
                        "displayNameAttribute": {
                            "type": "string"
                        },
                        "groupFilterFormat": {
                            "type": "string"
                        },
                        "userFilterFormat": {
                            "type": "string"
                        },
                        "password": {
                            "type": "string"
                        },
                        "groupSearchBase": {
                            "type": "string"
                        },
                        "userSearchBase": {
                            "type": "string"
                        },
                        "mailAttribute": {
                            "type": "string"
                        },
                        "membershipGroupAttributeIsDn": {
                            "type": "boolean"
                        },
                        "groupLookupMethod": {
                            "type": "string",
                            "enum": [
                                "NONE",
                                "VIA_GROUP",
                                "VIA_USER"
                            ]
                        }
                    }
                },
                {
                    "$ref": "#/definitions/AuthenticationServer"
                }
            ]
        },
        "BackupFileVO": {
            "properties": {
                "fileSize": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "lastModified": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "BackupSettingsVO": {
            "properties": {
                "numberOfDaysToKeepBackups": {
                    "type": "integer",
                    "format": "int32"
                },
                "backupLocation": {
                    "type": "string"
                },
                "failIfNotMountedRemotely": {
                    "type": "boolean"
                },
                "backupCleanupEnabled": {
                    "type": "boolean"
                }
            }
        },
        "ChangeRequest": {
            "properties": {
                "submitionDate": {
                    "type": "integer",
                    "format": "int64"
                },
                "equipmentCreated": {
                    "type": "boolean"
                },
                "requestNumber": {
                    "type": "integer",
                    "format": "int32"
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ChangeRequestComment"
                    }
                },
                "templateName": {
                    "type": "string"
                },
                "author": {
                    "type": "string"
                },
                "lastChangeDate": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "formData": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "SUBMITTED",
                        "ACCEPTED",
                        "REJECTED",
                        "DRAFT",
                        "NEEDS_UPDATE",
                        "CLOSED"
                    ]
                },
                "trackingId": {
                    "type": "string"
                }
            }
        },
        "EquipmentChangeRequestVO": {
            "properties": {
                "warnings": {
                    "type": "object"
                },
                "createdItemsIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ChangeRequestComment": {
            "properties": {
                "submitionDate": {
                    "type": "integer",
                    "format": "int64"
                },
                "author": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "ChangeRequestTemplate": {
            "properties": {
                "formTemplate": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "AnalyticsSettingsVO": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "DCESettingsVO": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "mac": {
                    "type": "string"
                }
            }
        },
        "DCEUpdateReportVO": {
            "properties": {
                "processStatus": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                },
                "startedAt": {
                    "type": "string"
                },
                "lines": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "finishesAt": {
                    "type": "string"
                }
            }
        },
        "SsoOptionsVO": {
            "properties": {
                "responseType": {
                    "type": "string"
                },
                "audience": {
                    "type": "string"
                },
                "clientID": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                }
            }
        },
        "DCEUpdateSettingsVO": {
            "properties": {
                "newValues": {
                    "$ref": "#/definitions/DCESettingsVO"
                },
                "currentValues": {
                    "$ref": "#/definitions/DCESettingsVO"
                }
            }
        },
        "FeatureFlagSetting": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "CustomPropertyTemplate": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of custom property template"
                },
                "definitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomPropertyDefinition"
                    },
                    "description": "definitions"
                }
            }
        },
        "CustomPropertyDefinition": {
            "properties": {
                "allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the list of allowed values."
                },
                "unique": {
                    "type": "boolean",
                    "description": "whether value must be unique among all assets."
                },
                "enabledForTenants": {
                    "type": "boolean",
                    "description": "whether a value is visible for tenant users."
                },
                "name": {
                    "type": "string",
                    "description": "the name of the custom property"
                },
                "description": {
                    "type": "string",
                    "description": "description of custom property if defined"
                },
                "type": {
                    "type": "string",
                    "description": "type of custom property"
                },
                "mandatory": {
                    "type": "boolean",
                    "description": "whether a value must be specified."
                }
            }
        },
        "CustomersCount": {
            "properties": {
                "customersCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "locationOrRoomUuid": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "EquipmentBrowserEditPayload": {
            "properties": {
                "selectionStrategy": {
                    "type": "string",
                    "enum": [
                        "SELECT_ALL",
                        "SELECT",
                        "SELECT_ALL_WITH_EXCLUSIONS"
                    ]
                },
                "fieldName": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "operationType": {
                    "type": "string",
                    "enum": [
                        "ADD",
                        "REMOVE"
                    ]
                },
                "fieldType": {
                    "type": "string"
                },
                "value": {
                    "type": "object"
                },
                "selectedItems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ReportParameters": {
            "properties": {
                "browserTimeUtcDifference": {
                    "type": "integer",
                    "format": "int32"
                },
                "selectionStrategy": {
                    "type": "string",
                    "enum": [
                        "SELECT_ALL",
                        "SELECT",
                        "SELECT_ALL_WITH_EXCLUSIONS"
                    ]
                },
                "query": {
                    "type": "string"
                },
                "format": {
                    "type": "string",
                    "enum": [
                        "CSV",
                        "XLSX"
                    ]
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReportParameter"
                    }
                },
                "selectedItems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ReportParameter": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "CUSTOM_PROPERTY",
                        "STANDARD",
                        "LOCATION"
                    ]
                }
            }
        },
        "PageResultVO": {
            "properties": {
                "lastSeenOffset": {
                    "type": "integer",
                    "format": "int32"
                },
                "total": {
                    "type": "integer",
                    "format": "int64"
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Asset"
                    }
                }
            }
        },
        "WeeklyScheduleVO": {
            "allOf": [
                {
                    "properties": {
                        "hours": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "dayOfWeek": {
                            "type": "string",
                            "enum": [
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                                "Sunday"
                            ]
                        },
                        "minutes": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                },
                {
                    "$ref": "#/definitions/ScheduleVO"
                }
            ]
        },
        "EtlConfigurationVO": {
            "required": [
                "configurationType"
            ],
            "properties": {
                "schedule": {
                    "$ref": "#/definitions/ScheduleVO"
                },
                "database": {
                    "$ref": "#/definitions/EtlDatabaseVO"
                },
                "paused": {
                    "type": "boolean"
                },
                "systemName": {
                    "type": "string"
                },
                "lastRun": {
                    "$ref": "#/definitions/JobRunVO"
                },
                "id": {
                    "type": "string"
                },
                "configurationType": {
                    "type": "string",
                    "enum": [
                        "Import",
                        "Export"
                    ]
                },
                "transformation": {
                    "$ref": "#/definitions/EtlTransformationVO"
                }
            },
            "discriminator": "configurationType"
        },
        "IntervalScheduleVO": {
            "allOf": [
                {
                    "properties": {
                        "intervalType": {
                            "type": "string",
                            "enum": [
                                "Minutes",
                                "Hours"
                            ]
                        },
                        "interval": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                },
                {
                    "$ref": "#/definitions/ScheduleVO"
                }
            ]
        },
        "EtlInternalDatabaseVO": {
            "allOf": [
                {
                    "properties": {
                        "databaseType": {
                            "type": "string",
                            "enum": [
                                "Internal",
                                "External"
                            ]
                        },
                        "allowedIpAddresses": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                {
                    "$ref": "#/definitions/EtlDatabaseVO"
                }
            ]
        },
        "EtlElementTypeVO": {
            "properties": {
                "id": {
                    "type": "string",
                    "enum": [
                        "Job",
                        "Transformation"
                    ]
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "ScheduleVO": {
            "required": [
                "scheduleType"
            ],
            "properties": {
                "scheduleType": {
                    "type": "string",
                    "enum": [
                        "Interval",
                        "Daily",
                        "Weekly",
                        "Monthly"
                    ]
                }
            },
            "discriminator": "scheduleType"
        },
        "EtlExportConfigurationVO": {
            "allOf": [
                {},
                {
                    "$ref": "#/definitions/EtlConfigurationVO"
                }
            ]
        },
        "WeekdayVO": {
            "properties": {
                "id": {
                    "type": "string",
                    "enum": [
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday",
                        "Sunday"
                    ]
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "IntervalTypeVO": {
            "properties": {
                "id": {
                    "type": "string",
                    "enum": [
                        "Minutes",
                        "Hours"
                    ]
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "ScheduleTypeVO": {
            "properties": {
                "id": {
                    "type": "string",
                    "enum": [
                        "Interval",
                        "Daily",
                        "Weekly",
                        "Monthly"
                    ]
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "EtlDatabaseVO": {
            "required": [
                "databaseType"
            ],
            "properties": {
                "databaseType": {
                    "type": "string",
                    "enum": [
                        "Internal",
                        "External"
                    ]
                },
                "password": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "discriminator": "databaseType"
        },
        "EtlImportConfigurationVO": {
            "allOf": [
                {
                    "properties": {
                        "importAsNameAssetPropertyName": {
                            "type": "string"
                        },
                        "lockSerialNumber": {
                            "type": "boolean"
                        },
                        "importNameToAssociatedItem": {
                            "type": "boolean"
                        },
                        "importBarcodeToAssociatedItem": {
                            "type": "boolean"
                        },
                        "lockBarcode": {
                            "type": "boolean"
                        },
                        "lockName": {
                            "type": "boolean"
                        },
                        "importSerialNumberToAssociatedItem": {
                            "type": "boolean"
                        }
                    }
                },
                {
                    "$ref": "#/definitions/EtlConfigurationVO"
                }
            ]
        },
        "JobRunVO": {
            "properties": {
                "time": {
                    "type": "integer",
                    "format": "int64"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Ok",
                        "Failed"
                    ]
                }
            }
        },
        "EtlExternalDatabaseVO": {
            "allOf": [
                {
                    "properties": {
                        "databaseType": {
                            "type": "string",
                            "enum": [
                                "Internal",
                                "External"
                            ]
                        },
                        "hostname": {
                            "type": "string"
                        },
                        "port": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "driverClass": {
                            "type": "string"
                        },
                        "url": {
                            "type": "string"
                        },
                        "dialectName": {
                            "type": "string"
                        }
                    }
                },
                {
                    "$ref": "#/definitions/EtlDatabaseVO"
                }
            ]
        },
        "ConfigurationTypeVO": {
            "properties": {
                "id": {
                    "type": "string",
                    "enum": [
                        "Import",
                        "Export"
                    ]
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "EtlSchedulerInfoVO": {
            "properties": {
                "jobName": {
                    "type": "string"
                },
                "running": {
                    "type": "boolean"
                },
                "isRunning": {
                    "type": "boolean"
                },
                "nextFireTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "configurationId": {
                    "type": "string"
                }
            }
        },
        "RunStatusVO": {
            "properties": {
                "id": {
                    "type": "string",
                    "enum": [
                        "Ok",
                        "Failed"
                    ]
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "MonthlyScheduleVO": {
            "allOf": [
                {
                    "properties": {
                        "hours": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "dayOfMonth": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "minutes": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                },
                {
                    "$ref": "#/definitions/ScheduleVO"
                }
            ]
        },
        "DatabaseTypeVO": {
            "properties": {
                "id": {
                    "type": "string",
                    "enum": [
                        "Internal",
                        "External"
                    ]
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "DialectInformationVO": {
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "EtlTransformationVO": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "configurationType": {
                    "type": "string",
                    "enum": [
                        "Import",
                        "Export"
                    ]
                },
                "elementType": {
                    "type": "string",
                    "enum": [
                        "Job",
                        "Transformation"
                    ]
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EtlTransformationParameterVO"
                    }
                }
            }
        },
        "EtlTransformationParameterVO": {
            "properties": {
                "password": {
                    "type": "boolean"
                },
                "internal": {
                    "type": "boolean"
                },
                "defaultValue": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "DailyScheduleVO": {
            "allOf": [
                {
                    "properties": {
                        "hours": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "minutes": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                },
                {
                    "$ref": "#/definitions/ScheduleVO"
                }
            ]
        },
        "DriverInformationVO": {
            "properties": {
                "driverClass": {
                    "type": "string"
                },
                "majorVersion": {
                    "type": "integer",
                    "format": "int32"
                },
                "minorVersion": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "DimensionGenomeVO": {
            "allOf": [
                {
                    "properties": {
                        "mountTypes": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "FLOOR_MOUNTABLE",
                                    "RACK_MOUNTABLE",
                                    "BLADE_ENCLOSURE_MOUNTABLE",
                                    "SWITCH_ENCLOSURE_MOUNTABLE",
                                    "SHELF_MOUNTABLE"
                                ]
                            }
                        },
                        "depth": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "width": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "weight": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "height": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                },
                {
                    "$ref": "#/definitions/GenomeVO"
                }
            ]
        },
        "CondenserGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "NetworkGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/PoweredRackMountableGenomeVO"
                }
            ]
        },
        "SwitchGearGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "BreakerModuleGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "ServerGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/PoweredRackMountableGenomeVO"
                }
            ]
        },
        "PumpGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "CableTypeVO": {
            "properties": {
                "red": {
                    "type": "integer",
                    "format": "int32"
                },
                "green": {
                    "type": "integer",
                    "format": "int32"
                },
                "blue": {
                    "type": "integer",
                    "format": "int32"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "GeneratorGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "WindowGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "BatteryCabinetGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "BladeEnclosureGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/ModularEnclosureGenomeVO"
                }
            ]
        },
        "PoweredRackMountableGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "nameplatePowerDraw": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/RackMountableGenomeVO"
                }
            ]
        },
        "PerforatedTileGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "PowerPanelGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "DoorGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "FireSuppressionGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "EpoGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "ChillerGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "GenericRackGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/RackGenomeVO"
                }
            ]
        },
        "GenericFloorGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "RackMountAtsGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/RackMountableGenomeVO"
                }
            ]
        },
        "AirCooledChillerGenome": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "UpsGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "InRoomGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "GenericRackMountableGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/PoweredRackMountableGenomeVO"
                }
            ]
        },
        "GapGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "CduGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "WaterTankGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "CrahGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "RectifierGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "ModularEnclosureGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "productFamily": {
                            "type": "string"
                        },
                        "halfHeightModulesSupport": {
                            "type": "boolean"
                        },
                        "horizontalModulesSupport": {
                            "type": "boolean"
                        },
                        "moduleBayCount": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "firstBayPositionNumber": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "type": {
                            "type": "string"
                        },
                        "fullHeightModulesSupport": {
                            "type": "boolean"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/RackMountableGenomeVO"
                }
            ]
        },
        "HacsGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "PduGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "BlockGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "SwitchModuleGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/ModularGenomeVO"
                }
            ]
        },
        "RackMountableGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "availableRackMountPositions": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "TOP_MOUNTED",
                                    "NOT_MOUNTED",
                                    "RIGHT_REAR_MOUNTED",
                                    "LEFT_REAR_MOUNTED",
                                    "REAR_MOUNTED",
                                    "FRONT_MOUNTED",
                                    "LEFT_FRONT_MOUNTED",
                                    "RIGHT_FRONT_MOUNTED",
                                    "BOTTOM_MOUNTED"
                                ]
                            }
                        },
                        "type": {
                            "type": "string"
                        },
                        "unitHeight": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "CoolingTowerGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "WallGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "BladeGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/ModularGenomeVO"
                }
            ]
        },
        "AtsGenome": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "DryCoolerGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "RackGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "maxUPositionCapacity": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "type": {
                            "type": "string"
                        },
                        "maxWeightCapacity": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "GenomeVO": {
            "required": [
                "type"
            ],
            "properties": {
                "modelName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "partNumber": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "manufacturer": {
                    "type": "string"
                }
            },
            "discriminator": "type"
        },
        "GenericFloorPoweredGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "PersonGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "ModularGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "nameplatePowerDraw": {
                            "type": "number",
                            "format": "double"
                        },
                        "moduleType": {
                            "type": "string",
                            "enum": [
                                "SINGLE",
                                "DOUBLE"
                            ]
                        },
                        "moduleWidth": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "productFamilyList": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "type": {
                            "type": "string"
                        },
                        "bayType": {
                            "type": "string",
                            "enum": [
                                "FULL",
                                "HALF"
                            ]
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "OverheadCoolerGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "CracFanGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "CacsGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "VerticalGrilleGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "CracGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "RemoteDistributionUnitGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "NetworkCableGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "length": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "cableType": {
                            "$ref": "#/definitions/CableTypeVO"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/GenomeVO"
                }
            ]
        },
        "BreakerGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "SwitchEnclosureGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/ModularEnclosureGenomeVO"
                }
            ]
        },
        "FanwallGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "ShelfGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/RackMountableGenomeVO"
                }
            ]
        },
        "RackMountPduGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "outlets": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/RackMountableGenomeVO"
                }
            ]
        },
        "RowGenomeVO": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/DimensionGenomeVO"
                }
            ]
        },
        "Value": {
            "properties": {
                "time": {
                    "type": "string",
                    "format": "date-time"
                },
                "value": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "KPISeries": {
            "properties": {
                "kpiSeries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KeyValues"
                    }
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "AVAILABLE_U_SPACE",
                        "TOTAL_U_SPACE",
                        "TOTAL_WEIGHT",
                        "RESERVED_U_SPACE",
                        "SERVER_QUANTITY",
                        "TOTAL_USED_U_SPACE",
                        "COOLER_LOAD",
                        "COOLER_CAPACITY",
                        "INLET_TEMPERATURE",
                        "AMBIENT_TEMPERATURE",
                        "HOT_AISLE_CAPTURE_INDEX",
                        "COLD_AISLE_CAPTURE_INDEX",
                        "ABOVE_TEMPERATURE_THRESHOLD",
                        "BELOW_TEMPERATURE_THRESHOLD",
                        "AVAILABLE_NETWORK_PORTS",
                        "TOTAL_NETWORK_PORTS",
                        "AVAILABLE_FIBER_NETWORK_PORTS",
                        "AVAILABLE_COPPER_NETWORK_PORTS",
                        "AVAILABLE_OTHER_NETWORK_PORTS",
                        "USED_FIBER_NETWORK_PORTS",
                        "USED_COPPER_NETWORK_PORTS",
                        "USED_OTHER_NETWORK_PORTS",
                        "TOTAL_USED_NETWORK_PORTS",
                        "AUXILIARY_LOAD_CONNECTED",
                        "MEASURED_PEAK_LOAD",
                        "MEASURED_FAILOVER_LOAD",
                        "MEASURED_PEAK_LOAD_PER_PHASE",
                        "NAMEPLATE_LOAD",
                        "ESTIMATED_LOAD",
                        "POWER_NEEDED",
                        "ESTIMATED_FAILOVER_LOAD",
                        "RESERVED_FOR_PSU_UNCERTAINTY",
                        "RESERVED_FOR_DISTRIBUTION_REDUNDANCY",
                        "POWER_CAPACITY",
                        "ESTIMATED_LOAD_PER_TOP_LEVEL_ITEM",
                        "FAILOVER_LOAD_PER_TOP_LEVEL_ITEM",
                        "RESERVED_FOR_PSU_UNCERTAINTY_PER_TOP_LEVEL_ITEM",
                        "MEASURED_FOR_TOP_LEVEL_ITEM_AVERAGE",
                        "MEASURED_FOR_TOP_LEVEL_ITEM_PEAK",
                        "UNCONNECTED_POWER_CONSUMERS_LOAD",
                        "PUE",
                        "TOTAL_WORK_ORDERS",
                        "COMPLETED_WORK_ORDERS",
                        "CANCELLED_WORK_ORDERS",
                        "WORK_ORDERS_NOT_STARTED",
                        "OVERDUE_WORK_ORDERS",
                        "WORK_ORDERS_IN_PROGRESS",
                        "IT_ASSET_POWER_UTILIZATION",
                        "IT_ASSET_CPU_UTILIZATION",
                        "RETIREMENT_CANDIDATES",
                        "CONSOLIDATION_CANDIDATES",
                        "TOTAL_IT_ASSETS",
                        "NOT_ASSOCIATED_IT_ASSETS",
                        "IT_ASSET_COST",
                        "RETIREMENT_CANDIDATES_COST",
                        "CONSOLIDATION_CANDIDATE_COST",
                        "IT_ASSET_COST_PER_TAG",
                        "ROOM_AREA",
                        "FLOOR_MOUNTED_AREA",
                        "REVENUE_SPACE",
                        "SELLABLE_AREA",
                        "SPACE_UTILIZATION",
                        "SOLD_SPACE",
                        "OPEN_SPACE",
                        "INTERNAL_SPACE",
                        "RESERVED_SPACE",
                        "TOTAL_RACKS",
                        "TOTAL_STANDALONE_RACKS",
                        "CLOSED_RACKS",
                        "OPEN_RACKS",
                        "INTERNAL_RACKS",
                        "RESERVED_RACKS",
                        "RACKS_UTILIZATION",
                        "CLOSED_STANDALONE_RACKS",
                        "OPEN_STANDALONE_RACKS",
                        "INTERNAL_STANDALONE_RACKS",
                        "RESERVED_STANDALONE_RACKS",
                        "STANDALONE_RACKS_UTILIZATION",
                        "TOTAL_CONTRACTED_POWER",
                        "POWER_CONTRACTED_WITH_CUSTOMERS",
                        "POWER_RESERVED_FOR_CUSTOMERS",
                        "USED_POWER_OUTLET_CAPACITY",
                        "TOTAL_POWER_OUTLET_CAPACITY",
                        "FREE_POWER_OUTLET_CAPACITY"
                    ]
                }
            }
        },
        "KPI": {
            "properties": {
                "kpiValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Value"
                    }
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "AVAILABLE_U_SPACE",
                        "TOTAL_U_SPACE",
                        "TOTAL_WEIGHT",
                        "RESERVED_U_SPACE",
                        "SERVER_QUANTITY",
                        "TOTAL_USED_U_SPACE",
                        "COOLER_LOAD",
                        "COOLER_CAPACITY",
                        "INLET_TEMPERATURE",
                        "AMBIENT_TEMPERATURE",
                        "HOT_AISLE_CAPTURE_INDEX",
                        "COLD_AISLE_CAPTURE_INDEX",
                        "ABOVE_TEMPERATURE_THRESHOLD",
                        "BELOW_TEMPERATURE_THRESHOLD",
                        "AVAILABLE_NETWORK_PORTS",
                        "TOTAL_NETWORK_PORTS",
                        "AVAILABLE_FIBER_NETWORK_PORTS",
                        "AVAILABLE_COPPER_NETWORK_PORTS",
                        "AVAILABLE_OTHER_NETWORK_PORTS",
                        "USED_FIBER_NETWORK_PORTS",
                        "USED_COPPER_NETWORK_PORTS",
                        "USED_OTHER_NETWORK_PORTS",
                        "TOTAL_USED_NETWORK_PORTS",
                        "AUXILIARY_LOAD_CONNECTED",
                        "MEASURED_PEAK_LOAD",
                        "MEASURED_FAILOVER_LOAD",
                        "MEASURED_PEAK_LOAD_PER_PHASE",
                        "NAMEPLATE_LOAD",
                        "ESTIMATED_LOAD",
                        "POWER_NEEDED",
                        "ESTIMATED_FAILOVER_LOAD",
                        "RESERVED_FOR_PSU_UNCERTAINTY",
                        "RESERVED_FOR_DISTRIBUTION_REDUNDANCY",
                        "POWER_CAPACITY",
                        "ESTIMATED_LOAD_PER_TOP_LEVEL_ITEM",
                        "FAILOVER_LOAD_PER_TOP_LEVEL_ITEM",
                        "RESERVED_FOR_PSU_UNCERTAINTY_PER_TOP_LEVEL_ITEM",
                        "MEASURED_FOR_TOP_LEVEL_ITEM_AVERAGE",
                        "MEASURED_FOR_TOP_LEVEL_ITEM_PEAK",
                        "UNCONNECTED_POWER_CONSUMERS_LOAD",
                        "PUE",
                        "TOTAL_WORK_ORDERS",
                        "COMPLETED_WORK_ORDERS",
                        "CANCELLED_WORK_ORDERS",
                        "WORK_ORDERS_NOT_STARTED",
                        "OVERDUE_WORK_ORDERS",
                        "WORK_ORDERS_IN_PROGRESS",
                        "IT_ASSET_POWER_UTILIZATION",
                        "IT_ASSET_CPU_UTILIZATION",
                        "RETIREMENT_CANDIDATES",
                        "CONSOLIDATION_CANDIDATES",
                        "TOTAL_IT_ASSETS",
                        "NOT_ASSOCIATED_IT_ASSETS",
                        "IT_ASSET_COST",
                        "RETIREMENT_CANDIDATES_COST",
                        "CONSOLIDATION_CANDIDATE_COST",
                        "IT_ASSET_COST_PER_TAG",
                        "ROOM_AREA",
                        "FLOOR_MOUNTED_AREA",
                        "REVENUE_SPACE",
                        "SELLABLE_AREA",
                        "SPACE_UTILIZATION",
                        "SOLD_SPACE",
                        "OPEN_SPACE",
                        "INTERNAL_SPACE",
                        "RESERVED_SPACE",
                        "TOTAL_RACKS",
                        "TOTAL_STANDALONE_RACKS",
                        "CLOSED_RACKS",
                        "OPEN_RACKS",
                        "INTERNAL_RACKS",
                        "RESERVED_RACKS",
                        "RACKS_UTILIZATION",
                        "CLOSED_STANDALONE_RACKS",
                        "OPEN_STANDALONE_RACKS",
                        "INTERNAL_STANDALONE_RACKS",
                        "RESERVED_STANDALONE_RACKS",
                        "STANDALONE_RACKS_UTILIZATION",
                        "TOTAL_CONTRACTED_POWER",
                        "POWER_CONTRACTED_WITH_CUSTOMERS",
                        "POWER_RESERVED_FOR_CUSTOMERS",
                        "USED_POWER_OUTLET_CAPACITY",
                        "TOTAL_POWER_OUTLET_CAPACITY",
                        "FREE_POWER_OUTLET_CAPACITY"
                    ]
                }
            }
        },
        "KeyValues": {
            "properties": {
                "seriesKey": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Value"
                    }
                }
            }
        },
        "SizeLicense": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "total": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Returns the total number of available rack licenses for a license module.\n null if the module is under enterprise license."
                        },
                        "enterprise": {
                            "type": "boolean"
                        },
                        "used": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/License"
                }
            ]
        },
        "CoolingOptimizeLicense": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/SizeLicense"
                }
            ]
        },
        "ITPowerControlLicense": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/SizeLicense"
                }
            ]
        },
        "CapacityLicense": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/SizeLicense"
                }
            ]
        },
        "ChangeLicense": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/SizeLicense"
                }
            ]
        },
        "License": {
            "required": [
                "type"
            ],
            "properties": {
                "licenseKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LicenseKey"
                    }
                },
                "expired": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "discriminator": "type"
        },
        "ITOptimizeLicense": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/SizeLicense"
                }
            ]
        },
        "EnergyEfficiencyLicense": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/License"
                }
            ]
        },
        "OperationLicense": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/SizeLicense"
                }
            ]
        },
        "LicenseKey": {
            "properties": {
                "expiryDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "expired": {
                    "type": "boolean"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "installDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "enterprise": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "MailServer": {
            "properties": {
                "useSecureSmtp": {
                    "type": "boolean"
                },
                "hostname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "format": "int32"
                },
                "connectionTimeout": {
                    "type": "integer",
                    "format": "int32"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "MailSettings": {
            "properties": {
                "backup": {
                    "$ref": "#/definitions/MailServer"
                },
                "isValid": {
                    "type": "boolean"
                },
                "fromAddress": {
                    "type": "string"
                },
                "primary": {
                    "$ref": "#/definitions/MailServer"
                }
            }
        },
        "Mail": {
            "properties": {
                "cc": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bcc": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subject": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JobVO": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "info": {
                    "type": "string"
                }
            }
        },
        "JobStatusVO": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "PowerCapacityPerPhase": {
            "properties": {
                "powerLimit": {
                    "type": "number",
                    "format": "double"
                },
                "valuesPerPhase": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerPhaseValue"
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerPhaseValue"
                    }
                },
                "phaseName": {
                    "type": "string"
                }
            }
        },
        "PerPhaseValue": {
            "properties": {
                "valueId": {
                    "type": "string"
                },
                "value": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "RackMountPduPowerConnectionOptions": {
            "properties": {
                "hasElectricalComponents": {
                    "type": "boolean"
                },
                "powerPhases": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "L1",
                            "L2",
                            "L3",
                            "NONE",
                            "L1_L2",
                            "L1_L2_L3",
                            "L1_L3",
                            "L2_L3"
                        ]
                    }
                },
                "availablePowerOutletIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pairedId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "PowerPathColor": {
            "properties": {
                "red": {
                    "type": "integer",
                    "format": "int32"
                },
                "green": {
                    "type": "integer",
                    "format": "int32"
                },
                "blue": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "PowerCable": {
            "properties": {
                "fromAssetId": {
                    "type": "string"
                },
                "powerPhase": {
                    "type": "string",
                    "enum": [
                        "L1",
                        "L2",
                        "L3",
                        "NONE",
                        "L1_L2",
                        "L1_L2_L3",
                        "L1_L3",
                        "L2_L3"
                    ]
                },
                "id": {
                    "type": "string"
                },
                "toAssetId": {
                    "type": "string"
                },
                "toOutletId": {
                    "type": "string"
                }
            }
        },
        "CableTrayRoutingSettings": {
            "properties": {
                "cableRoutingWeightRateThreshold": {
                    "type": "integer",
                    "format": "int32"
                },
                "cableRoutingFillRateThreshold": {
                    "type": "integer",
                    "format": "int32"
                },
                "cableRoutingLengthFactor": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "AddSensorMappingOperation": {
            "properties": {
                "panelSensorMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddSensorMappingPanelOperation"
                    }
                },
                "pduUuid": {
                    "type": "string"
                }
            }
        },
        "ExternalItemPropertyVO": {
            "properties": {
                "value": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "UpdatePowerFactorCollection": {
            "properties": {
                "updates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UpdatePowerFactor"
                    }
                }
            }
        },
        "ExternalItemVO": {
            "properties": {
                "externalItemIdentifier": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalItemPropertyVO"
                    }
                }
            }
        },
        "AddSensorMappingPanelOperation": {
            "properties": {
                "externalKey": {
                    "type": "string"
                },
                "sensors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddSensorMappingCircuitOperation"
                    }
                },
                "panelName": {
                    "type": "string"
                }
            }
        },
        "UpdatePowerFactor": {
            "properties": {
                "powerFactor2": {
                    "type": "number",
                    "format": "double"
                },
                "ampFactor1": {
                    "type": "number",
                    "format": "double"
                },
                "powerFactor3": {
                    "type": "number",
                    "format": "double"
                },
                "ampFactor2": {
                    "type": "number",
                    "format": "double"
                },
                "powerFactor1": {
                    "type": "number",
                    "format": "double"
                },
                "externalItemUuid": {
                    "type": "string"
                },
                "ampFactor3": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "AddSensorMappingCircuitOperation": {
            "properties": {
                "circuitNumber": {
                    "type": "integer",
                    "format": "int32"
                },
                "sensorCategory": {
                    "type": "string",
                    "enum": [
                        "AMPS",
                        "POWER"
                    ]
                },
                "factor": {
                    "type": "number",
                    "format": "double"
                },
                "sensorId": {
                    "type": "string"
                }
            }
        },
        "JobStatus": {
            "properties": {
                "jobStatus": {
                    "type": "string",
                    "enum": [
                        "NOT_AVAILABLE",
                        "OK",
                        "ERROR"
                    ]
                },
                "time": {
                    "type": "integer",
                    "format": "int64"
                },
                "jobType": {
                    "type": "string",
                    "enum": [
                        "ASSET_RETRIEVAL",
                        "ALARM_RETRIEVAL",
                        "POWER_DATA_RETRIEVAL"
                    ]
                }
            }
        },
        "ConnectionConfiguration": {
            "properties": {
                "powerDataRetrievalIntervalSeconds": {
                    "type": "integer",
                    "format": "int32"
                },
                "deviceRetrievalIntervalSeconds": {
                    "type": "integer",
                    "format": "int32"
                },
                "powerDataSampleSizeDays": {
                    "type": "integer",
                    "format": "int32"
                },
                "alarmRetrievalIntervalSeconds": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "RegistrationStatus": {
            "properties": {
                "registrationText": {
                    "type": "string"
                },
                "messageText": {
                    "type": "string"
                },
                "registrationStatus": {
                    "type": "string"
                },
                "serialNumber": {
                    "type": "string"
                },
                "messageUrlText": {
                    "type": "string"
                },
                "connectionConfiguration": {
                    "$ref": "#/definitions/ConnectionConfiguration"
                },
                "messageTitle": {
                    "type": "string"
                },
                "jobStatusses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JobStatus"
                    }
                },
                "registrationTitle": {
                    "type": "string"
                },
                "messageUrl": {
                    "type": "string"
                },
                "registrationUrlText": {
                    "type": "string"
                },
                "registrationCode": {
                    "type": "string"
                },
                "registrationUrl": {
                    "type": "string"
                }
            }
        },
        "CustomerPermission": {
            "allOf": [
                {
                    "required": [
                        "accessType",
                        "id",
                        "type"
                    ],
                    "properties": {
                        "accessType": {
                            "type": "string",
                            "enum": [
                                "EDIT",
                                "READ_ONLY",
                                "NO_ACCESS"
                            ]
                        },
                        "dataAccess": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "MEASURED_POWER",
                                    "ESTIMATED_LOAD_POWER",
                                    "DEVICES",
                                    "CUSTOM_PROPERTIES",
                                    "SEE_UNAVAILABLE_ASSETS_FROM_THE_SAME_ROOM"
                                ]
                            },
                            "uniqueItems": true
                        },
                        "id": {
                            "type": "string",
                            "description": "the id of a customer"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Permission"
                }
            ]
        },
        "User": {
            "properties": {
                "userGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserGroup"
                    }
                },
                "authenticationServerId": {
                    "type": "string",
                    "format": "uuid"
                },
                "preferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserPreference"
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "fullName": {
                    "type": "string"
                },
                "customerIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "forceSingleSignOn": {
                    "type": "boolean"
                },
                "locale": {
                    "type": "string",
                    "enum": [
                        "en",
                        "de",
                        "es",
                        "fr",
                        "it",
                        "ja",
                        "ko",
                        "ru",
                        "pt_BR",
                        "zh_CN",
                        "zh_TW"
                    ]
                },
                "email": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "Permission": {
            "required": [
                "type"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "discriminator": "type"
        },
        "UserPreference": {
            "properties": {
                "value": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "AssetPermission": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "accessType": {
                            "type": "string",
                            "enum": [
                                "EDIT",
                                "READ_ONLY",
                                "NO_ACCESS"
                            ]
                        },
                        "assetId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "id": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Permission"
                }
            ]
        },
        "UserGroup": {
            "properties": {
                "authenticationServerId": {
                    "type": "string",
                    "format": "uuid"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "name": {
                    "type": "string"
                },
                "customerIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/User"
                    }
                }
            }
        },
        "UserMessage": {
            "properties": {
                "createdBy": {
                    "type": "string"
                },
                "restricted": {
                    "type": "boolean"
                },
                "activeTo": {
                    "type": "integer",
                    "format": "int64"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "title": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "integer",
                    "format": "int64"
                },
                "activeFrom": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "ResetPassword": {
            "properties": {
                "password": {
                    "type": "string"
                },
                "mailTemplate": {
                    "$ref": "#/definitions/MailTemplate"
                }
            }
        },
        "UserCreation": {
            "properties": {
                "password": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/User"
                },
                "mailTemplate": {
                    "$ref": "#/definitions/MailTemplate"
                }
            }
        },
        "UserSavedQuery": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "global": {
                    "type": "boolean"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "MailTemplate": {
            "properties": {
                "subject": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "TaskDependency": {
            "required": [
                "type"
            ],
            "properties": {
                "targetTaskId": {
                    "type": "string",
                    "format": "uuid"
                },
                "sourceTaskId": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "type": "string"
                }
            },
            "discriminator": "type"
        },
        "ConnectCableTask": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "sourceId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "itemId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "itemName": {
                            "type": "string"
                        },
                        "powerOutletName": {
                            "type": "string"
                        },
                        "destinationName": {
                            "type": "string"
                        },
                        "powerOutletId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "powerPhase": {
                            "type": "string"
                        },
                        "sourceName": {
                            "type": "string"
                        },
                        "destinationId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Task"
                }
            ]
        },
        "StartTask": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Task"
                }
            ]
        },
        "Ticket": {
            "properties": {
                "summary": {
                    "type": "string"
                },
                "dueDate": {
                    "$ref": "#/definitions/Date"
                },
                "externalSystemId": {
                    "type": "string",
                    "format": "uuid"
                },
                "comment": {
                    "type": "string"
                },
                "assignee": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "REMEDY",
                        "ETL"
                    ]
                },
                "priority": {
                    "$ref": "#/definitions/TicketPriority"
                },
                "ticketId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/TicketStatus"
                }
            }
        },
        "Task": {
            "required": [
                "type"
            ],
            "properties": {
                "workOrder": {
                    "$ref": "#/definitions/WorkOrder"
                },
                "note": {
                    "type": "string"
                },
                "orderNumber": {
                    "type": "integer",
                    "format": "int32"
                },
                "neededByDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "sourceTaskDependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TaskDependency"
                    },
                    "uniqueItems": true
                },
                "type": {
                    "type": "string"
                },
                "completedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "assignedTo": {
                    "$ref": "#/definitions/AssignTo"
                },
                "assignedToGroup": {
                    "$ref": "#/definitions/AssignedToGroup"
                },
                "assignable": {
                    "type": "boolean"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "targetTaskDependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TaskDependency"
                    },
                    "uniqueItems": true
                },
                "dependencyStatus": {
                    "type": "string",
                    "enum": [
                        "READY",
                        "BLOCKED",
                        "BLOCKING"
                    ]
                },
                "unassignable": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "NOT_STARTED",
                        "IN_PROGRESS",
                        "COMPLETED",
                        "CANCELLED"
                    ]
                }
            },
            "discriminator": "type"
        },
        "AssignTo": {
            "required": [
                "type"
            ],
            "properties": {
                "emailAddress": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "discriminator": "type"
        },
        "AddTask": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "itemId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "itemName": {
                            "type": "string"
                        },
                        "itemLocation": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Task"
                }
            ]
        },
        "RemoveTask": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "itemId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "itemName": {
                            "type": "string"
                        },
                        "itemLocation": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Task"
                }
            ]
        },
        "WorkOrderIncludeOption": {
            "properties": {
                "WorkOrderIncludeOption": {
                    "type": "string",
                    "enum": [
                        "tasks",
                        "associated_tickets"
                    ]
                }
            }
        },
        "UserTask": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "description": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Task"
                }
            ]
        },
        "TicketStatus": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "EndTask": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Task"
                }
            ]
        },
        "Date": {
            "properties": {
                "time": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "WorkOrder": {
            "required": [
                "type"
            ],
            "properties": {
                "summary": {
                    "type": "string"
                },
                "orderNumber": {
                    "type": "integer",
                    "format": "int32"
                },
                "associatedTickets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Ticket"
                    }
                },
                "neededByDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "priority": {
                    "type": "string",
                    "enum": [
                        "HIGH",
                        "MEDIUM",
                        "LOW",
                        "UNKNOWN"
                    ]
                },
                "type": {
                    "type": "string"
                },
                "completedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "assignedTo": {
                    "$ref": "#/definitions/AssignTo"
                },
                "assignedToGroup": {
                    "$ref": "#/definitions/AssignedToGroup"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "projectCode": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "locked": {
                    "type": "boolean"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Task"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "NOT_STARTED",
                        "IN_PROGRESS",
                        "COMPLETED",
                        "CANCELLED"
                    ]
                }
            },
            "discriminator": "type"
        },
        "PlaceholderTask": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Task"
                }
            ]
        },
        "MoveTask": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "sourceId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "itemName": {
                            "type": "string"
                        },
                        "destinationName": {
                            "type": "string"
                        },
                        "sourceName": {
                            "type": "string"
                        },
                        "destinationId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Task"
                }
            ]
        },
        "NetworkConnectionTask": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "sourceId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "disconnect": {
                            "type": "boolean"
                        },
                        "destinationPortNumber": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "portCount": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "destinationPatchPanelRear": {
                            "type": "boolean"
                        },
                        "sourcePortNumber": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "usage": {
                            "type": "string"
                        },
                        "destinationLocation": {
                            "type": "string"
                        },
                        "sourceModuleName": {
                            "type": "string"
                        },
                        "destinationId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": {
                            "type": "string"
                        },
                        "sourceConnectorType": {
                            "type": "string"
                        },
                        "destinationModuleName": {
                            "type": "string"
                        },
                        "destinationConnectorType": {
                            "type": "string"
                        },
                        "sourcePatchPanelRear": {
                            "type": "boolean"
                        },
                        "destinationName": {
                            "type": "string"
                        },
                        "sourceLocation": {
                            "type": "string"
                        },
                        "sourceName": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Task"
                }
            ]
        },
        "SystemTask": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "systemReference": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Task"
                }
            ]
        },
        "TicketPriority": {
            "properties": {
                "priority": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "DisconnectCableTask": {
            "allOf": [
                {
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "sourceId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "itemId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "destinationName": {
                            "type": "string"
                        },
                        "sourceName": {
                            "type": "string"
                        },
                        "destinationId": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "discriminator": "type"
                },
                {
                    "$ref": "#/definitions/Task"
                }
            ]
        },
        "AssignedToGroup": {
            "required": [
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "type": "string"
                }
            },
            "discriminator": "type"
        }
    }
}
